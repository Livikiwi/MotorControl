
Nucleo-F303ZE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003eb8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800404c  0800404c  0001404c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004084  08004084  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004084  08004084  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004084  08004084  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004084  08004084  00014084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004088  08004088  00014088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800408c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  2000000c  08004098  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08004098  00020338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b36e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a22  00000000  00000000  0002b3aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000958  00000000  00000000  0002cdd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000880  00000000  00000000  0002d728  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c970  00000000  00000000  0002dfa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000086e0  00000000  00000000  0004a918  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ab4ae  00000000  00000000  00052ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fe4a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002600  00000000  00000000  000fe524  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004034 	.word	0x08004034

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004034 	.word	0x08004034

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fac6 	bl	8000768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f80a 	bl	80001f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f8ec 	bl	80003bc <MX_GPIO_Init>
  MX_RTC_Init();
 80001e4:	f000 f86e 	bl	80002c4 <MX_RTC_Init>
  MX_USART3_UART_Init();
 80001e8:	f000 f892 	bl	8000310 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 80001ec:	f000 f8c0 	bl	8000370 <MX_USB_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f0:	e7fe      	b.n	80001f0 <main+0x1c>
	...

080001f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b0a6      	sub	sp, #152	; 0x98
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80001fe:	2228      	movs	r2, #40	; 0x28
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f003 ff0e 	bl	8004024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800020c:	2200      	movs	r2, #0
 800020e:	601a      	str	r2, [r3, #0]
 8000210:	605a      	str	r2, [r3, #4]
 8000212:	609a      	str	r2, [r3, #8]
 8000214:	60da      	str	r2, [r3, #12]
 8000216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000218:	1d3b      	adds	r3, r7, #4
 800021a:	2258      	movs	r2, #88	; 0x58
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f003 ff00 	bl	8004024 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000224:	2309      	movs	r3, #9
 8000226:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000228:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800022c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022e:	2301      	movs	r3, #1
 8000230:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000232:	2301      	movs	r3, #1
 8000234:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000238:	2302      	movs	r3, #2
 800023a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800023e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000242:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000246:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800024a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000254:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000258:	4618      	mov	r0, r3
 800025a:	f001 fac7 	bl	80017ec <HAL_RCC_OscConfig>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000264:	f000 f94c 	bl	8000500 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000268:	230f      	movs	r3, #15
 800026a:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026c:	2302      	movs	r3, #2
 800026e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000278:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800027e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000282:	2102      	movs	r1, #2
 8000284:	4618      	mov	r0, r3
 8000286:	f002 f9c7 	bl	8002618 <HAL_RCC_ClockConfig>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000290:	f000 f936 	bl	8000500 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 8000294:	4b0a      	ldr	r3, [pc, #40]	; (80002c0 <SystemClock_Config+0xcc>)
 8000296:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000298:	2300      	movs	r3, #0
 800029a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800029c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002a0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002a2:	2300      	movs	r3, #0
 80002a4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	4618      	mov	r0, r3
 80002aa:	f002 fbeb 	bl	8002a84 <HAL_RCCEx_PeriphCLKConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80002b4:	f000 f924 	bl	8000500 <Error_Handler>
  }
}
 80002b8:	bf00      	nop
 80002ba:	3798      	adds	r7, #152	; 0x98
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	00030004 	.word	0x00030004

080002c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80002c8:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <MX_RTC_Init+0x44>)
 80002ca:	4a10      	ldr	r2, [pc, #64]	; (800030c <MX_RTC_Init+0x48>)
 80002cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80002ce:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <MX_RTC_Init+0x44>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <MX_RTC_Init+0x44>)
 80002d6:	227f      	movs	r2, #127	; 0x7f
 80002d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80002da:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <MX_RTC_Init+0x44>)
 80002dc:	22ff      	movs	r2, #255	; 0xff
 80002de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80002e0:	4b09      	ldr	r3, [pc, #36]	; (8000308 <MX_RTC_Init+0x44>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80002e6:	4b08      	ldr	r3, [pc, #32]	; (8000308 <MX_RTC_Init+0x44>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <MX_RTC_Init+0x44>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80002f2:	4805      	ldr	r0, [pc, #20]	; (8000308 <MX_RTC_Init+0x44>)
 80002f4:	f002 fde4 	bl	8002ec0 <HAL_RTC_Init>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80002fe:	f000 f8ff 	bl	8000500 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	200000a8 	.word	0x200000a8
 800030c:	40002800 	.word	0x40002800

08000310 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000314:	4b14      	ldr	r3, [pc, #80]	; (8000368 <MX_USART3_UART_Init+0x58>)
 8000316:	4a15      	ldr	r2, [pc, #84]	; (800036c <MX_USART3_UART_Init+0x5c>)
 8000318:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800031a:	4b13      	ldr	r3, [pc, #76]	; (8000368 <MX_USART3_UART_Init+0x58>)
 800031c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000320:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000322:	4b11      	ldr	r3, [pc, #68]	; (8000368 <MX_USART3_UART_Init+0x58>)
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000328:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <MX_USART3_UART_Init+0x58>)
 800032a:	2200      	movs	r2, #0
 800032c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800032e:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <MX_USART3_UART_Init+0x58>)
 8000330:	2200      	movs	r2, #0
 8000332:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000334:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <MX_USART3_UART_Init+0x58>)
 8000336:	220c      	movs	r2, #12
 8000338:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800033a:	4b0b      	ldr	r3, [pc, #44]	; (8000368 <MX_USART3_UART_Init+0x58>)
 800033c:	2200      	movs	r2, #0
 800033e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000340:	4b09      	ldr	r3, [pc, #36]	; (8000368 <MX_USART3_UART_Init+0x58>)
 8000342:	2200      	movs	r2, #0
 8000344:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000346:	4b08      	ldr	r3, [pc, #32]	; (8000368 <MX_USART3_UART_Init+0x58>)
 8000348:	2200      	movs	r2, #0
 800034a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <MX_USART3_UART_Init+0x58>)
 800034e:	2200      	movs	r2, #0
 8000350:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000352:	4805      	ldr	r0, [pc, #20]	; (8000368 <MX_USART3_UART_Init+0x58>)
 8000354:	f002 fe99 	bl	800308a <HAL_UART_Init>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800035e:	f000 f8cf 	bl	8000500 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	20000028 	.word	0x20000028
 800036c:	40004800 	.word	0x40004800

08000370 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000374:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <MX_USB_PCD_Init+0x44>)
 8000376:	4a10      	ldr	r2, [pc, #64]	; (80003b8 <MX_USB_PCD_Init+0x48>)
 8000378:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800037a:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <MX_USB_PCD_Init+0x44>)
 800037c:	2208      	movs	r2, #8
 800037e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000380:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <MX_USB_PCD_Init+0x44>)
 8000382:	2202      	movs	r2, #2
 8000384:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000386:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <MX_USB_PCD_Init+0x44>)
 8000388:	2202      	movs	r2, #2
 800038a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800038c:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <MX_USB_PCD_Init+0x44>)
 800038e:	2200      	movs	r2, #0
 8000390:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000392:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <MX_USB_PCD_Init+0x44>)
 8000394:	2200      	movs	r2, #0
 8000396:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000398:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <MX_USB_PCD_Init+0x44>)
 800039a:	2200      	movs	r2, #0
 800039c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800039e:	4805      	ldr	r0, [pc, #20]	; (80003b4 <MX_USB_PCD_Init+0x44>)
 80003a0:	f000 fcfc 	bl	8000d9c <HAL_PCD_Init>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 80003aa:	f000 f8a9 	bl	8000500 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	200000c8 	.word	0x200000c8
 80003b8:	40005c00 	.word	0x40005c00

080003bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b08c      	sub	sp, #48	; 0x30
 80003c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c2:	f107 031c 	add.w	r3, r7, #28
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]
 80003d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d2:	4b46      	ldr	r3, [pc, #280]	; (80004ec <MX_GPIO_Init+0x130>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	4a45      	ldr	r2, [pc, #276]	; (80004ec <MX_GPIO_Init+0x130>)
 80003d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003dc:	6153      	str	r3, [r2, #20]
 80003de:	4b43      	ldr	r3, [pc, #268]	; (80004ec <MX_GPIO_Init+0x130>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003e6:	61bb      	str	r3, [r7, #24]
 80003e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003ea:	4b40      	ldr	r3, [pc, #256]	; (80004ec <MX_GPIO_Init+0x130>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	4a3f      	ldr	r2, [pc, #252]	; (80004ec <MX_GPIO_Init+0x130>)
 80003f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003f4:	6153      	str	r3, [r2, #20]
 80003f6:	4b3d      	ldr	r3, [pc, #244]	; (80004ec <MX_GPIO_Init+0x130>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003fe:	617b      	str	r3, [r7, #20]
 8000400:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000402:	4b3a      	ldr	r3, [pc, #232]	; (80004ec <MX_GPIO_Init+0x130>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a39      	ldr	r2, [pc, #228]	; (80004ec <MX_GPIO_Init+0x130>)
 8000408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800040c:	6153      	str	r3, [r2, #20]
 800040e:	4b37      	ldr	r3, [pc, #220]	; (80004ec <MX_GPIO_Init+0x130>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000416:	613b      	str	r3, [r7, #16]
 8000418:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800041a:	4b34      	ldr	r3, [pc, #208]	; (80004ec <MX_GPIO_Init+0x130>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a33      	ldr	r2, [pc, #204]	; (80004ec <MX_GPIO_Init+0x130>)
 8000420:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	4b31      	ldr	r3, [pc, #196]	; (80004ec <MX_GPIO_Init+0x130>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000432:	4b2e      	ldr	r3, [pc, #184]	; (80004ec <MX_GPIO_Init+0x130>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4a2d      	ldr	r2, [pc, #180]	; (80004ec <MX_GPIO_Init+0x130>)
 8000438:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800043c:	6153      	str	r3, [r2, #20]
 800043e:	4b2b      	ldr	r3, [pc, #172]	; (80004ec <MX_GPIO_Init+0x130>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000446:	60bb      	str	r3, [r7, #8]
 8000448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044a:	4b28      	ldr	r3, [pc, #160]	; (80004ec <MX_GPIO_Init+0x130>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a27      	ldr	r2, [pc, #156]	; (80004ec <MX_GPIO_Init+0x130>)
 8000450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000454:	6153      	str	r3, [r2, #20]
 8000456:	4b25      	ldr	r3, [pc, #148]	; (80004ec <MX_GPIO_Init+0x130>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000462:	2200      	movs	r2, #0
 8000464:	f244 0181 	movw	r1, #16513	; 0x4081
 8000468:	4821      	ldr	r0, [pc, #132]	; (80004f0 <MX_GPIO_Init+0x134>)
 800046a:	f000 fc7f 	bl	8000d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800046e:	2200      	movs	r2, #0
 8000470:	2140      	movs	r1, #64	; 0x40
 8000472:	4820      	ldr	r0, [pc, #128]	; (80004f4 <MX_GPIO_Init+0x138>)
 8000474:	f000 fc7a 	bl	8000d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000478:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800047c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800047e:	4b1e      	ldr	r3, [pc, #120]	; (80004f8 <MX_GPIO_Init+0x13c>)
 8000480:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000486:	f107 031c 	add.w	r3, r7, #28
 800048a:	4619      	mov	r1, r3
 800048c:	481b      	ldr	r0, [pc, #108]	; (80004fc <MX_GPIO_Init+0x140>)
 800048e:	f000 fae3 	bl	8000a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000492:	f244 0381 	movw	r3, #16513	; 0x4081
 8000496:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000498:	2301      	movs	r3, #1
 800049a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049c:	2300      	movs	r3, #0
 800049e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a0:	2300      	movs	r3, #0
 80004a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a4:	f107 031c 	add.w	r3, r7, #28
 80004a8:	4619      	mov	r1, r3
 80004aa:	4811      	ldr	r0, [pc, #68]	; (80004f0 <MX_GPIO_Init+0x134>)
 80004ac:	f000 fad4 	bl	8000a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80004b0:	2340      	movs	r3, #64	; 0x40
 80004b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b4:	2301      	movs	r3, #1
 80004b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b8:	2300      	movs	r3, #0
 80004ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004bc:	2300      	movs	r3, #0
 80004be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80004c0:	f107 031c 	add.w	r3, r7, #28
 80004c4:	4619      	mov	r1, r3
 80004c6:	480b      	ldr	r0, [pc, #44]	; (80004f4 <MX_GPIO_Init+0x138>)
 80004c8:	f000 fac6 	bl	8000a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80004cc:	2380      	movs	r3, #128	; 0x80
 80004ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d0:	2300      	movs	r3, #0
 80004d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	2300      	movs	r3, #0
 80004d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80004d8:	f107 031c 	add.w	r3, r7, #28
 80004dc:	4619      	mov	r1, r3
 80004de:	4805      	ldr	r0, [pc, #20]	; (80004f4 <MX_GPIO_Init+0x138>)
 80004e0:	f000 faba 	bl	8000a58 <HAL_GPIO_Init>

}
 80004e4:	bf00      	nop
 80004e6:	3730      	adds	r7, #48	; 0x30
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40021000 	.word	0x40021000
 80004f0:	48000400 	.word	0x48000400
 80004f4:	48001800 	.word	0x48001800
 80004f8:	10110000 	.word	0x10110000
 80004fc:	48000800 	.word	0x48000800

08000500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
	...

08000510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000516:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <HAL_MspInit+0x44>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <HAL_MspInit+0x44>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6193      	str	r3, [r2, #24]
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <HAL_MspInit+0x44>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <HAL_MspInit+0x44>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	4a08      	ldr	r2, [pc, #32]	; (8000554 <HAL_MspInit+0x44>)
 8000534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000538:	61d3      	str	r3, [r2, #28]
 800053a:	4b06      	ldr	r3, [pc, #24]	; (8000554 <HAL_MspInit+0x44>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000542:	603b      	str	r3, [r7, #0]
 8000544:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000

08000558 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a0d      	ldr	r2, [pc, #52]	; (800059c <HAL_RTC_MspInit+0x44>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d111      	bne.n	800058e <HAL_RTC_MspInit+0x36>
 800056a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800056e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	fa93 f3a3 	rbit	r3, r3
 8000576:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000578:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800057a:	fab3 f383 	clz	r3, r3
 800057e:	b2db      	uxtb	r3, r3
 8000580:	461a      	mov	r2, r3
 8000582:	4b07      	ldr	r3, [pc, #28]	; (80005a0 <HAL_RTC_MspInit+0x48>)
 8000584:	4413      	add	r3, r2
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	461a      	mov	r2, r3
 800058a:	2301      	movs	r3, #1
 800058c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	40002800 	.word	0x40002800
 80005a0:	10908100 	.word	0x10908100

080005a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a17      	ldr	r2, [pc, #92]	; (8000620 <HAL_UART_MspInit+0x7c>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d128      	bne.n	8000618 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80005c6:	4b17      	ldr	r3, [pc, #92]	; (8000624 <HAL_UART_MspInit+0x80>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	4a16      	ldr	r2, [pc, #88]	; (8000624 <HAL_UART_MspInit+0x80>)
 80005cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005d0:	61d3      	str	r3, [r2, #28]
 80005d2:	4b14      	ldr	r3, [pc, #80]	; (8000624 <HAL_UART_MspInit+0x80>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <HAL_UART_MspInit+0x80>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	4a10      	ldr	r2, [pc, #64]	; (8000624 <HAL_UART_MspInit+0x80>)
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	6153      	str	r3, [r2, #20]
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <HAL_UART_MspInit+0x80>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80005f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80005fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fc:	2302      	movs	r3, #2
 80005fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000604:	2303      	movs	r3, #3
 8000606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000608:	2307      	movs	r3, #7
 800060a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4619      	mov	r1, r3
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <HAL_UART_MspInit+0x84>)
 8000614:	f000 fa20 	bl	8000a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000618:	bf00      	nop
 800061a:	3728      	adds	r7, #40	; 0x28
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40004800 	.word	0x40004800
 8000624:	40021000 	.word	0x40021000
 8000628:	48000c00 	.word	0x48000c00

0800062c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a0d      	ldr	r2, [pc, #52]	; (8000670 <HAL_PCD_MspInit+0x44>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d113      	bne.n	8000666 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800063e:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <HAL_PCD_MspInit+0x48>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	4a0c      	ldr	r2, [pc, #48]	; (8000674 <HAL_PCD_MspInit+0x48>)
 8000644:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000648:	61d3      	str	r3, [r2, #28]
 800064a:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <HAL_PCD_MspInit+0x48>)
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8000656:	2200      	movs	r2, #0
 8000658:	2100      	movs	r1, #0
 800065a:	2014      	movs	r0, #20
 800065c:	f000 f9c5 	bl	80009ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000660:	2014      	movs	r0, #20
 8000662:	f000 f9de 	bl	8000a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40005c00 	.word	0x40005c00
 8000674:	40021000 	.word	0x40021000

08000678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800068a:	e7fe      	b.n	800068a <HardFault_Handler+0x4>

0800068c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <MemManage_Handler+0x4>

08000692 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000696:	e7fe      	b.n	8000696 <BusFault_Handler+0x4>

08000698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800069c:	e7fe      	b.n	800069c <UsageFault_Handler+0x4>

0800069e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr

080006ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006cc:	f000 f892 	bl	80007f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006d8:	4802      	ldr	r0, [pc, #8]	; (80006e4 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80006da:	f000 fc13 	bl	8000f04 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	200000c8 	.word	0x200000c8

080006e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <SystemInit+0x28>)
 80006ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006f2:	4a07      	ldr	r2, [pc, #28]	; (8000710 <SystemInit+0x28>)
 80006f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006fc:	4b04      	ldr	r3, [pc, #16]	; (8000710 <SystemInit+0x28>)
 80006fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000702:	609a      	str	r2, [r3, #8]
#endif
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800074c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000718:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800071a:	e003      	b.n	8000724 <LoopCopyDataInit>

0800071c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800071e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000720:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000722:	3104      	adds	r1, #4

08000724 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000724:	480b      	ldr	r0, [pc, #44]	; (8000754 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000726:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000728:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800072a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800072c:	d3f6      	bcc.n	800071c <CopyDataInit>
	ldr	r2, =_sbss
 800072e:	4a0b      	ldr	r2, [pc, #44]	; (800075c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000730:	e002      	b.n	8000738 <LoopFillZerobss>

08000732 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000732:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000734:	f842 3b04 	str.w	r3, [r2], #4

08000738 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <LoopForever+0x16>)
	cmp	r2, r3
 800073a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800073c:	d3f9      	bcc.n	8000732 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800073e:	f7ff ffd3 	bl	80006e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000742:	f003 fc4b 	bl	8003fdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000746:	f7ff fd45 	bl	80001d4 <main>

0800074a <LoopForever>:

LoopForever:
    b LoopForever
 800074a:	e7fe      	b.n	800074a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800074c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000750:	0800408c 	.word	0x0800408c
	ldr	r0, =_sdata
 8000754:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000758:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800075c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000760:	20000338 	.word	0x20000338

08000764 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000764:	e7fe      	b.n	8000764 <ADC1_2_IRQHandler>
	...

08000768 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <HAL_Init+0x28>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a07      	ldr	r2, [pc, #28]	; (8000790 <HAL_Init+0x28>)
 8000772:	f043 0310 	orr.w	r3, r3, #16
 8000776:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000778:	2003      	movs	r0, #3
 800077a:	f000 f92b 	bl	80009d4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800077e:	2000      	movs	r0, #0
 8000780:	f000 f808 	bl	8000794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000784:	f7ff fec4 	bl	8000510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40022000 	.word	0x40022000

08000794 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <HAL_InitTick+0x54>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <HAL_InitTick+0x58>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	4619      	mov	r1, r3
 80007a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 f943 	bl	8000a3e <HAL_SYSTICK_Config>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007be:	2301      	movs	r3, #1
 80007c0:	e00e      	b.n	80007e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b0f      	cmp	r3, #15
 80007c6:	d80a      	bhi.n	80007de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c8:	2200      	movs	r2, #0
 80007ca:	6879      	ldr	r1, [r7, #4]
 80007cc:	f04f 30ff 	mov.w	r0, #4294967295
 80007d0:	f000 f90b 	bl	80009ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007d4:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <HAL_InitTick+0x5c>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007da:	2300      	movs	r3, #0
 80007dc:	e000      	b.n	80007e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000008 	.word	0x20000008
 80007f0:	20000004 	.word	0x20000004

080007f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_IncTick+0x20>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <HAL_IncTick+0x24>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4413      	add	r3, r2
 8000804:	4a04      	ldr	r2, [pc, #16]	; (8000818 <HAL_IncTick+0x24>)
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000008 	.word	0x20000008
 8000818:	20000334 	.word	0x20000334

0800081c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <HAL_GetTick+0x14>)
 8000822:	681b      	ldr	r3, [r3, #0]
}
 8000824:	4618      	mov	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	20000334 	.word	0x20000334

08000834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f003 0307 	and.w	r3, r3, #7
 8000842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <__NVIC_SetPriorityGrouping+0x44>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800084a:	68ba      	ldr	r2, [r7, #8]
 800084c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000850:	4013      	ands	r3, r2
 8000852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800085c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000866:	4a04      	ldr	r2, [pc, #16]	; (8000878 <__NVIC_SetPriorityGrouping+0x44>)
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	60d3      	str	r3, [r2, #12]
}
 800086c:	bf00      	nop
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000880:	4b04      	ldr	r3, [pc, #16]	; (8000894 <__NVIC_GetPriorityGrouping+0x18>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	0a1b      	lsrs	r3, r3, #8
 8000886:	f003 0307 	and.w	r3, r3, #7
}
 800088a:	4618      	mov	r0, r3
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	db0b      	blt.n	80008c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	f003 021f 	and.w	r2, r3, #31
 80008b0:	4907      	ldr	r1, [pc, #28]	; (80008d0 <__NVIC_EnableIRQ+0x38>)
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	095b      	lsrs	r3, r3, #5
 80008b8:	2001      	movs	r0, #1
 80008ba:	fa00 f202 	lsl.w	r2, r0, r2
 80008be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000e100 	.word	0xe000e100

080008d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	db0a      	blt.n	80008fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	490c      	ldr	r1, [pc, #48]	; (8000920 <__NVIC_SetPriority+0x4c>)
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	0112      	lsls	r2, r2, #4
 80008f4:	b2d2      	uxtb	r2, r2
 80008f6:	440b      	add	r3, r1
 80008f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008fc:	e00a      	b.n	8000914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4908      	ldr	r1, [pc, #32]	; (8000924 <__NVIC_SetPriority+0x50>)
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	f003 030f 	and.w	r3, r3, #15
 800090a:	3b04      	subs	r3, #4
 800090c:	0112      	lsls	r2, r2, #4
 800090e:	b2d2      	uxtb	r2, r2
 8000910:	440b      	add	r3, r1
 8000912:	761a      	strb	r2, [r3, #24]
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000e100 	.word	0xe000e100
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000928:	b480      	push	{r7}
 800092a:	b089      	sub	sp, #36	; 0x24
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	f1c3 0307 	rsb	r3, r3, #7
 8000942:	2b04      	cmp	r3, #4
 8000944:	bf28      	it	cs
 8000946:	2304      	movcs	r3, #4
 8000948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	3304      	adds	r3, #4
 800094e:	2b06      	cmp	r3, #6
 8000950:	d902      	bls.n	8000958 <NVIC_EncodePriority+0x30>
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	3b03      	subs	r3, #3
 8000956:	e000      	b.n	800095a <NVIC_EncodePriority+0x32>
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800095c:	f04f 32ff 	mov.w	r2, #4294967295
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	43da      	mvns	r2, r3
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	401a      	ands	r2, r3
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000970:	f04f 31ff 	mov.w	r1, #4294967295
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	fa01 f303 	lsl.w	r3, r1, r3
 800097a:	43d9      	mvns	r1, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000980:	4313      	orrs	r3, r2
         );
}
 8000982:	4618      	mov	r0, r3
 8000984:	3724      	adds	r7, #36	; 0x24
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
	...

08000990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3b01      	subs	r3, #1
 800099c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009a0:	d301      	bcc.n	80009a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009a2:	2301      	movs	r3, #1
 80009a4:	e00f      	b.n	80009c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009a6:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <SysTick_Config+0x40>)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ae:	210f      	movs	r1, #15
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	f7ff ff8e 	bl	80008d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <SysTick_Config+0x40>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009be:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <SysTick_Config+0x40>)
 80009c0:	2207      	movs	r2, #7
 80009c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	e000e010 	.word	0xe000e010

080009d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff ff29 	bl	8000834 <__NVIC_SetPriorityGrouping>
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b086      	sub	sp, #24
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	4603      	mov	r3, r0
 80009f2:	60b9      	str	r1, [r7, #8]
 80009f4:	607a      	str	r2, [r7, #4]
 80009f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009fc:	f7ff ff3e 	bl	800087c <__NVIC_GetPriorityGrouping>
 8000a00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	68b9      	ldr	r1, [r7, #8]
 8000a06:	6978      	ldr	r0, [r7, #20]
 8000a08:	f7ff ff8e 	bl	8000928 <NVIC_EncodePriority>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a12:	4611      	mov	r1, r2
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ff5d 	bl	80008d4 <__NVIC_SetPriority>
}
 8000a1a:	bf00      	nop
 8000a1c:	3718      	adds	r7, #24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	4603      	mov	r3, r0
 8000a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ff31 	bl	8000898 <__NVIC_EnableIRQ>
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f7ff ffa2 	bl	8000990 <SysTick_Config>
 8000a4c:	4603      	mov	r3, r0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b087      	sub	sp, #28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a66:	e160      	b.n	8000d2a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	fa01 f303 	lsl.w	r3, r1, r3
 8000a74:	4013      	ands	r3, r2
 8000a76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	f000 8152 	beq.w	8000d24 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d003      	beq.n	8000a90 <HAL_GPIO_Init+0x38>
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	2b12      	cmp	r3, #18
 8000a8e:	d123      	bne.n	8000ad8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	08da      	lsrs	r2, r3, #3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3208      	adds	r2, #8
 8000a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	f003 0307 	and.w	r3, r3, #7
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	220f      	movs	r2, #15
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	43db      	mvns	r3, r3
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	691a      	ldr	r2, [r3, #16]
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	08da      	lsrs	r2, r3, #3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	3208      	adds	r2, #8
 8000ad2:	6939      	ldr	r1, [r7, #16]
 8000ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	4013      	ands	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f003 0203 	and.w	r2, r3, #3
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d00b      	beq.n	8000b2c <HAL_GPIO_Init+0xd4>
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d007      	beq.n	8000b2c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b20:	2b11      	cmp	r3, #17
 8000b22:	d003      	beq.n	8000b2c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	2b12      	cmp	r3, #18
 8000b2a:	d130      	bne.n	8000b8e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	2203      	movs	r2, #3
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4013      	ands	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	68da      	ldr	r2, [r3, #12]
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b62:	2201      	movs	r2, #1
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	091b      	lsrs	r3, r3, #4
 8000b78:	f003 0201 	and.w	r2, r3, #1
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	68db      	ldr	r3, [r3, #12]
 8000b92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	2203      	movs	r2, #3
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	689a      	ldr	r2, [r3, #8]
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 80ac 	beq.w	8000d24 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bcc:	4b5e      	ldr	r3, [pc, #376]	; (8000d48 <HAL_GPIO_Init+0x2f0>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	4a5d      	ldr	r2, [pc, #372]	; (8000d48 <HAL_GPIO_Init+0x2f0>)
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	6193      	str	r3, [r2, #24]
 8000bd8:	4b5b      	ldr	r3, [pc, #364]	; (8000d48 <HAL_GPIO_Init+0x2f0>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000be4:	4a59      	ldr	r2, [pc, #356]	; (8000d4c <HAL_GPIO_Init+0x2f4>)
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	089b      	lsrs	r3, r3, #2
 8000bea:	3302      	adds	r3, #2
 8000bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	f003 0303 	and.w	r3, r3, #3
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	220f      	movs	r2, #15
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	43db      	mvns	r3, r3
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4013      	ands	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c0e:	d025      	beq.n	8000c5c <HAL_GPIO_Init+0x204>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a4f      	ldr	r2, [pc, #316]	; (8000d50 <HAL_GPIO_Init+0x2f8>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d01f      	beq.n	8000c58 <HAL_GPIO_Init+0x200>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a4e      	ldr	r2, [pc, #312]	; (8000d54 <HAL_GPIO_Init+0x2fc>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d019      	beq.n	8000c54 <HAL_GPIO_Init+0x1fc>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a4d      	ldr	r2, [pc, #308]	; (8000d58 <HAL_GPIO_Init+0x300>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d013      	beq.n	8000c50 <HAL_GPIO_Init+0x1f8>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a4c      	ldr	r2, [pc, #304]	; (8000d5c <HAL_GPIO_Init+0x304>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d00d      	beq.n	8000c4c <HAL_GPIO_Init+0x1f4>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a4b      	ldr	r2, [pc, #300]	; (8000d60 <HAL_GPIO_Init+0x308>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d007      	beq.n	8000c48 <HAL_GPIO_Init+0x1f0>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a4a      	ldr	r2, [pc, #296]	; (8000d64 <HAL_GPIO_Init+0x30c>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d101      	bne.n	8000c44 <HAL_GPIO_Init+0x1ec>
 8000c40:	2306      	movs	r3, #6
 8000c42:	e00c      	b.n	8000c5e <HAL_GPIO_Init+0x206>
 8000c44:	2307      	movs	r3, #7
 8000c46:	e00a      	b.n	8000c5e <HAL_GPIO_Init+0x206>
 8000c48:	2305      	movs	r3, #5
 8000c4a:	e008      	b.n	8000c5e <HAL_GPIO_Init+0x206>
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	e006      	b.n	8000c5e <HAL_GPIO_Init+0x206>
 8000c50:	2303      	movs	r3, #3
 8000c52:	e004      	b.n	8000c5e <HAL_GPIO_Init+0x206>
 8000c54:	2302      	movs	r3, #2
 8000c56:	e002      	b.n	8000c5e <HAL_GPIO_Init+0x206>
 8000c58:	2301      	movs	r3, #1
 8000c5a:	e000      	b.n	8000c5e <HAL_GPIO_Init+0x206>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	f002 0203 	and.w	r2, r2, #3
 8000c64:	0092      	lsls	r2, r2, #2
 8000c66:	4093      	lsls	r3, r2
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c6e:	4937      	ldr	r1, [pc, #220]	; (8000d4c <HAL_GPIO_Init+0x2f4>)
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	089b      	lsrs	r3, r3, #2
 8000c74:	3302      	adds	r3, #2
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c7c:	4b3a      	ldr	r3, [pc, #232]	; (8000d68 <HAL_GPIO_Init+0x310>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	43db      	mvns	r3, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d003      	beq.n	8000ca0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ca0:	4a31      	ldr	r2, [pc, #196]	; (8000d68 <HAL_GPIO_Init+0x310>)
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ca6:	4b30      	ldr	r3, [pc, #192]	; (8000d68 <HAL_GPIO_Init+0x310>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d003      	beq.n	8000cca <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cca:	4a27      	ldr	r2, [pc, #156]	; (8000d68 <HAL_GPIO_Init+0x310>)
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cd0:	4b25      	ldr	r3, [pc, #148]	; (8000d68 <HAL_GPIO_Init+0x310>)
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d003      	beq.n	8000cf4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cf4:	4a1c      	ldr	r2, [pc, #112]	; (8000d68 <HAL_GPIO_Init+0x310>)
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cfa:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <HAL_GPIO_Init+0x310>)
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	43db      	mvns	r3, r3
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4013      	ands	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d003      	beq.n	8000d1e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d1e:	4a12      	ldr	r2, [pc, #72]	; (8000d68 <HAL_GPIO_Init+0x310>)
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	3301      	adds	r3, #1
 8000d28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	fa22 f303 	lsr.w	r3, r2, r3
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	f47f ae97 	bne.w	8000a68 <HAL_GPIO_Init+0x10>
  }
}
 8000d3a:	bf00      	nop
 8000d3c:	371c      	adds	r7, #28
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40010000 	.word	0x40010000
 8000d50:	48000400 	.word	0x48000400
 8000d54:	48000800 	.word	0x48000800
 8000d58:	48000c00 	.word	0x48000c00
 8000d5c:	48001000 	.word	0x48001000
 8000d60:	48001400 	.word	0x48001400
 8000d64:	48001800 	.word	0x48001800
 8000d68:	40010400 	.word	0x40010400

08000d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	460b      	mov	r3, r1
 8000d76:	807b      	strh	r3, [r7, #2]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d7c:	787b      	ldrb	r3, [r7, #1]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d003      	beq.n	8000d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d82:	887a      	ldrh	r2, [r7, #2]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d88:	e002      	b.n	8000d90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d8a:	887a      	ldrh	r2, [r7, #2]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d9e:	b08b      	sub	sp, #44	; 0x2c
 8000da0:	af06      	add	r7, sp, #24
 8000da2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d101      	bne.n	8000dae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e0a6      	b.n	8000efc <HAL_PCD_Init+0x160>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d106      	bne.n	8000dc8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff fc32 	bl	800062c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2203      	movs	r2, #3
 8000dcc:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f002 fd3b 	bl	8003850 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	73fb      	strb	r3, [r7, #15]
 8000dde:	e035      	b.n	8000e4c <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	015b      	lsls	r3, r3, #5
 8000de6:	4413      	add	r3, r2
 8000de8:	3329      	adds	r3, #41	; 0x29
 8000dea:	2201      	movs	r2, #1
 8000dec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	015b      	lsls	r3, r3, #5
 8000df4:	4413      	add	r3, r2
 8000df6:	3328      	adds	r3, #40	; 0x28
 8000df8:	7bfa      	ldrb	r2, [r7, #15]
 8000dfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	7bfa      	ldrb	r2, [r7, #15]
 8000e00:	b291      	uxth	r1, r2
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	015b      	lsls	r3, r3, #5
 8000e06:	4413      	add	r3, r2
 8000e08:	3336      	adds	r3, #54	; 0x36
 8000e0a:	460a      	mov	r2, r1
 8000e0c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	015b      	lsls	r3, r3, #5
 8000e14:	4413      	add	r3, r2
 8000e16:	332b      	adds	r3, #43	; 0x2b
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	015b      	lsls	r3, r3, #5
 8000e22:	4413      	add	r3, r2
 8000e24:	3338      	adds	r3, #56	; 0x38
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	015b      	lsls	r3, r3, #5
 8000e30:	4413      	add	r3, r2
 8000e32:	333c      	adds	r3, #60	; 0x3c
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	3302      	adds	r3, #2
 8000e3e:	015b      	lsls	r3, r3, #5
 8000e40:	4413      	add	r3, r2
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	73fb      	strb	r3, [r7, #15]
 8000e4c:	7bfa      	ldrb	r2, [r7, #15]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d3c4      	bcc.n	8000de0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e56:	2300      	movs	r3, #0
 8000e58:	73fb      	strb	r3, [r7, #15]
 8000e5a:	e031      	b.n	8000ec0 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	015b      	lsls	r3, r3, #5
 8000e62:	4413      	add	r3, r2
 8000e64:	f203 1329 	addw	r3, r3, #297	; 0x129
 8000e68:	2200      	movs	r2, #0
 8000e6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	015b      	lsls	r3, r3, #5
 8000e72:	4413      	add	r3, r2
 8000e74:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000e78:	7bfa      	ldrb	r2, [r7, #15]
 8000e7a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	015b      	lsls	r3, r3, #5
 8000e82:	4413      	add	r3, r2
 8000e84:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	015b      	lsls	r3, r3, #5
 8000e92:	4413      	add	r3, r2
 8000e94:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	015b      	lsls	r3, r3, #5
 8000ea2:	4413      	add	r3, r2
 8000ea4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	330a      	adds	r3, #10
 8000eb2:	015b      	lsls	r3, r3, #5
 8000eb4:	4413      	add	r3, r2
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	73fb      	strb	r3, [r7, #15]
 8000ec0:	7bfa      	ldrb	r2, [r7, #15]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d3c8      	bcc.n	8000e5c <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	687e      	ldr	r6, [r7, #4]
 8000ed2:	466d      	mov	r5, sp
 8000ed4:	f106 0410 	add.w	r4, r6, #16
 8000ed8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000edc:	6823      	ldr	r3, [r4, #0]
 8000ede:	602b      	str	r3, [r5, #0]
 8000ee0:	1d33      	adds	r3, r6, #4
 8000ee2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ee4:	6838      	ldr	r0, [r7, #0]
 8000ee6:	f002 fcd0 	bl	800388a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f04 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f002 ffc5 	bl	8003ea0 <USB_ReadInterrupts>
 8000f16:	4603      	mov	r3, r0
 8000f18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f20:	d102      	bne.n	8000f28 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f000 f9d2 	bl	80012cc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f002 ffb7 	bl	8003ea0 <USB_ReadInterrupts>
 8000f32:	4603      	mov	r3, r0
 8000f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f3c:	d112      	bne.n	8000f64 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f50:	b292      	uxth	r2, r2
 8000f52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 f902 	bl	8001160 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 f91c 	bl	800119c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f002 ff99 	bl	8003ea0 <USB_ReadInterrupts>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f78:	d10b      	bne.n	8000f92 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000f8c:	b292      	uxth	r2, r2
 8000f8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f002 ff82 	bl	8003ea0 <USB_ReadInterrupts>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fa6:	d10b      	bne.n	8000fc0 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f002 ff6b 	bl	8003ea0 <USB_ReadInterrupts>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fd4:	d126      	bne.n	8001024 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f022 0204 	bic.w	r2, r2, #4
 8000fe8:	b292      	uxth	r2, r2
 8000fea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f022 0208 	bic.w	r2, r2, #8
 8001000:	b292      	uxth	r2, r2
 8001002:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f000 f8be 	bl	8001188 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001014:	b29a      	uxth	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800101e:	b292      	uxth	r2, r2
 8001020:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4618      	mov	r0, r3
 800102a:	f002 ff39 	bl	8003ea0 <USB_ReadInterrupts>
 800102e:	4603      	mov	r3, r0
 8001030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001034:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001038:	d131      	bne.n	800109e <HAL_PCD_IRQHandler+0x19a>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001042:	b29a      	uxth	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f042 0208 	orr.w	r2, r2, #8
 800104c:	b292      	uxth	r2, r2
 800104e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800105a:	b29a      	uxth	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001064:	b292      	uxth	r2, r2
 8001066:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001072:	b29a      	uxth	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f042 0204 	orr.w	r2, r2, #4
 800107c:	b292      	uxth	r2, r2
 800107e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f002 ff0a 	bl	8003ea0 <USB_ReadInterrupts>
 800108c:	4603      	mov	r3, r0
 800108e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001096:	d002      	beq.n	800109e <HAL_PCD_IRQHandler+0x19a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 f86b 	bl	8001174 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f002 fefc 	bl	8003ea0 <USB_ReadInterrupts>
 80010a8:	4603      	mov	r3, r0
 80010aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010b2:	d10e      	bne.n	80010d2 <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010bc:	b29a      	uxth	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010c6:	b292      	uxth	r2, r2
 80010c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f000 f83d 	bl	800114c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f002 fee2 	bl	8003ea0 <USB_ReadInterrupts>
 80010dc:	4603      	mov	r3, r0
 80010de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010e6:	d10b      	bne.n	8001100 <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010fa:	b292      	uxth	r2, r2
 80010fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	460b      	mov	r3, r1
 8001112:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d101      	bne.n	80011b6 <HAL_PCD_SetAddress+0x1a>
 80011b2:	2302      	movs	r3, #2
 80011b4:	e013      	b.n	80011de <HAL_PCD_SetAddress+0x42>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	78fa      	ldrb	r2, [r7, #3]
 80011c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	78fa      	ldrb	r2, [r7, #3]
 80011cc:	4611      	mov	r1, r2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f002 fe52 	bl	8003e78 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b086      	sub	sp, #24
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	60f8      	str	r0, [r7, #12]
 80011ee:	607a      	str	r2, [r7, #4]
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	460b      	mov	r3, r1
 80011f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011f6:	7afb      	ldrb	r3, [r7, #11]
 80011f8:	f003 0307 	and.w	r3, r3, #7
 80011fc:	015b      	lsls	r3, r3, #5
 80011fe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	4413      	add	r3, r2
 8001206:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	2200      	movs	r2, #0
 800121e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001220:	7afb      	ldrb	r3, [r7, #11]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	b2da      	uxtb	r2, r3
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800122c:	7afb      	ldrb	r3, [r7, #11]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	2b00      	cmp	r3, #0
 8001234:	d106      	bne.n	8001244 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6979      	ldr	r1, [r7, #20]
 800123c:	4618      	mov	r0, r3
 800123e:	f002 fb49 	bl	80038d4 <USB_EPStartXfer>
 8001242:	e005      	b.n	8001250 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6979      	ldr	r1, [r7, #20]
 800124a:	4618      	mov	r0, r3
 800124c:	f002 fb42 	bl	80038d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	607a      	str	r2, [r7, #4]
 8001264:	603b      	str	r3, [r7, #0]
 8001266:	460b      	mov	r3, r1
 8001268:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800126a:	7afb      	ldrb	r3, [r7, #11]
 800126c:	f003 0307 	and.w	r3, r3, #7
 8001270:	015b      	lsls	r3, r3, #5
 8001272:	3328      	adds	r3, #40	; 0x28
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	4413      	add	r3, r2
 8001278:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	2200      	movs	r2, #0
 800128a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	2201      	movs	r2, #1
 8001290:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001292:	7afb      	ldrb	r3, [r7, #11]
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	b2da      	uxtb	r2, r3
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800129e:	7afb      	ldrb	r3, [r7, #11]
 80012a0:	f003 0307 	and.w	r3, r3, #7
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d106      	bne.n	80012b6 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6979      	ldr	r1, [r7, #20]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f002 fb10 	bl	80038d4 <USB_EPStartXfer>
 80012b4:	e005      	b.n	80012c2 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6979      	ldr	r1, [r7, #20]
 80012bc:	4618      	mov	r0, r3
 80012be:	f002 fb09 	bl	80038d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b089      	sub	sp, #36	; 0x24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80012d4:	e278      	b.n	80017c8 <PCD_EP_ISR_Handler+0x4fc>
  {
    wIstr = hpcd->Instance->ISTR;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012de:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80012e0:	8afb      	ldrh	r3, [r7, #22]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	f003 030f 	and.w	r3, r3, #15
 80012e8:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80012ea:	7d7b      	ldrb	r3, [r7, #21]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f040 8140 	bne.w	8001572 <PCD_EP_ISR_Handler+0x2a6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80012f2:	8afb      	ldrh	r3, [r7, #22]
 80012f4:	f003 0310 	and.w	r3, r3, #16
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d14f      	bne.n	800139c <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	b29b      	uxth	r3, r3
 8001304:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800130c:	b29c      	uxth	r4, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001316:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800131a:	b29b      	uxth	r3, r3
 800131c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3328      	adds	r3, #40	; 0x28
 8001322:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800132c:	b29b      	uxth	r3, r3
 800132e:	461a      	mov	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	4413      	add	r3, r2
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	6812      	ldr	r2, [r2, #0]
 800133c:	4413      	add	r3, r2
 800133e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	695a      	ldr	r2, [r3, #20]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	441a      	add	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800135a:	2100      	movs	r1, #0
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff fedf 	bl	8001120 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	f000 822c 	beq.w	80017c8 <PCD_EP_ISR_Handler+0x4fc>
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	2b00      	cmp	r3, #0
 8001376:	f040 8227 	bne.w	80017c8 <PCD_EP_ISR_Handler+0x4fc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001380:	b2db      	uxtb	r3, r3
 8001382:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001386:	b2da      	uxtb	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	b292      	uxth	r2, r2
 800138e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800139a:	e215      	b.n	80017c8 <PCD_EP_ISR_Handler+0x4fc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013a2:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80013ac:	8a7b      	ldrh	r3, [r7, #18]
 80013ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d031      	beq.n	800141a <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80013be:	b29b      	uxth	r3, r3
 80013c0:	461a      	mov	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	4413      	add	r3, r2
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	6812      	ldr	r2, [r2, #0]
 80013ce:	4413      	add	r3, r2
 80013d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6818      	ldr	r0, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	f002 fda6 	bl	8003f42 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001402:	4013      	ands	r3, r2
 8001404:	b29c      	uxth	r4, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800140e:	b292      	uxth	r2, r2
 8001410:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff fe90 	bl	8001138 <HAL_PCD_SetupStageCallback>
 8001418:	e1d6      	b.n	80017c8 <PCD_EP_ISR_Handler+0x4fc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800141a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800141e:	2b00      	cmp	r3, #0
 8001420:	f280 81d2 	bge.w	80017c8 <PCD_EP_ISR_Handler+0x4fc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	b29a      	uxth	r2, r3
 800142c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001430:	4013      	ands	r3, r2
 8001432:	b29c      	uxth	r4, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800143c:	b292      	uxth	r2, r2
 800143e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001448:	b29b      	uxth	r3, r3
 800144a:	461a      	mov	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	4413      	add	r3, r2
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	4413      	add	r3, r2
 800145a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	69db      	ldr	r3, [r3, #28]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d019      	beq.n	80014a4 <PCD_EP_ISR_Handler+0x1d8>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	695b      	ldr	r3, [r3, #20]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d015      	beq.n	80014a4 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6818      	ldr	r0, [r3, #0]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	6959      	ldr	r1, [r3, #20]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001488:	b29b      	uxth	r3, r3
 800148a:	f002 fd5a 	bl	8003f42 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	695a      	ldr	r2, [r3, #20]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	441a      	add	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800149c:	2100      	movs	r1, #0
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff fe32 	bl	8001108 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	461c      	mov	r4, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	441c      	add	r4, r3
 80014b6:	f204 4306 	addw	r3, r4, #1030	; 0x406
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d110      	bne.n	80014e6 <PCD_EP_ISR_Handler+0x21a>
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	801a      	strh	r2, [r3, #0]
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80014da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80014de:	b29a      	uxth	r2, r3
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	801a      	strh	r2, [r3, #0]
 80014e4:	e02f      	b.n	8001546 <PCD_EP_ISR_Handler+0x27a>
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	2b3e      	cmp	r3, #62	; 0x3e
 80014ec:	d813      	bhi.n	8001516 <PCD_EP_ISR_Handler+0x24a>
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	085b      	lsrs	r3, r3, #1
 80014f4:	61bb      	str	r3, [r7, #24]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d002      	beq.n	8001508 <PCD_EP_ISR_Handler+0x23c>
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	3301      	adds	r3, #1
 8001506:	61bb      	str	r3, [r7, #24]
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	b29b      	uxth	r3, r3
 800150c:	029b      	lsls	r3, r3, #10
 800150e:	b29a      	uxth	r2, r3
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	801a      	strh	r2, [r3, #0]
 8001514:	e017      	b.n	8001546 <PCD_EP_ISR_Handler+0x27a>
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	095b      	lsrs	r3, r3, #5
 800151c:	61bb      	str	r3, [r7, #24]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	f003 031f 	and.w	r3, r3, #31
 8001526:	2b00      	cmp	r3, #0
 8001528:	d102      	bne.n	8001530 <PCD_EP_ISR_Handler+0x264>
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	3b01      	subs	r3, #1
 800152e:	61bb      	str	r3, [r7, #24]
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	b29b      	uxth	r3, r3
 8001534:	029b      	lsls	r3, r3, #10
 8001536:	b29b      	uxth	r3, r3
 8001538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800153c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001540:	b29a      	uxth	r2, r3
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	b29b      	uxth	r3, r3
 800154e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001556:	b29c      	uxth	r4, r3
 8001558:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800155c:	b29c      	uxth	r4, r3
 800155e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001562:	b29c      	uxth	r4, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b9e      	ldr	r3, [pc, #632]	; (80017e4 <PCD_EP_ISR_Handler+0x518>)
 800156a:	4323      	orrs	r3, r4
 800156c:	b29b      	uxth	r3, r3
 800156e:	8013      	strh	r3, [r2, #0]
 8001570:	e12a      	b.n	80017c8 <PCD_EP_ISR_Handler+0x4fc>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	461a      	mov	r2, r3
 8001578:	7d7b      	ldrb	r3, [r7, #21]
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001582:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001586:	2b00      	cmp	r3, #0
 8001588:	f280 80cb 	bge.w	8001722 <PCD_EP_ISR_Handler+0x456>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	7d7b      	ldrb	r3, [r7, #21]
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	b29a      	uxth	r2, r3
 800159c:	f640 738f 	movw	r3, #3983	; 0xf8f
 80015a0:	4013      	ands	r3, r2
 80015a2:	b29c      	uxth	r4, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	461a      	mov	r2, r3
 80015aa:	7d7b      	ldrb	r3, [r7, #21]
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80015b4:	b292      	uxth	r2, r2
 80015b6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80015b8:	7d7b      	ldrb	r3, [r7, #21]
 80015ba:	015b      	lsls	r3, r3, #5
 80015bc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	4413      	add	r3, r2
 80015c4:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	7b1b      	ldrb	r3, [r3, #12]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d11f      	bne.n	800160e <PCD_EP_ISR_Handler+0x342>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	461a      	mov	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	4413      	add	r3, r2
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	6812      	ldr	r2, [r2, #0]
 80015e6:	4413      	add	r3, r2
 80015e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015f2:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80015f4:	8bfb      	ldrh	r3, [r7, #30]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d06e      	beq.n	80016d8 <PCD_EP_ISR_Handler+0x40c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6818      	ldr	r0, [r3, #0]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6959      	ldr	r1, [r3, #20]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	88da      	ldrh	r2, [r3, #6]
 8001606:	8bfb      	ldrh	r3, [r7, #30]
 8001608:	f002 fc9b 	bl	8003f42 <USB_ReadPMA>
 800160c:	e064      	b.n	80016d8 <PCD_EP_ISR_Handler+0x40c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	461a      	mov	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	b29b      	uxth	r3, r3
 8001620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d01f      	beq.n	8001668 <PCD_EP_ISR_Handler+0x39c>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001630:	b29b      	uxth	r3, r3
 8001632:	461a      	mov	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	4413      	add	r3, r2
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	4413      	add	r3, r2
 8001642:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800164c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800164e:	8bfb      	ldrh	r3, [r7, #30]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d028      	beq.n	80016a6 <PCD_EP_ISR_Handler+0x3da>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6818      	ldr	r0, [r3, #0]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6959      	ldr	r1, [r3, #20]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	891a      	ldrh	r2, [r3, #8]
 8001660:	8bfb      	ldrh	r3, [r7, #30]
 8001662:	f002 fc6e 	bl	8003f42 <USB_ReadPMA>
 8001666:	e01e      	b.n	80016a6 <PCD_EP_ISR_Handler+0x3da>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001670:	b29b      	uxth	r3, r3
 8001672:	461a      	mov	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	4413      	add	r3, r2
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6812      	ldr	r2, [r2, #0]
 8001680:	4413      	add	r3, r2
 8001682:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800168c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800168e:	8bfb      	ldrh	r3, [r7, #30]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d008      	beq.n	80016a6 <PCD_EP_ISR_Handler+0x3da>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6959      	ldr	r1, [r3, #20]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	895a      	ldrh	r2, [r3, #10]
 80016a0:	8bfb      	ldrh	r3, [r7, #30]
 80016a2:	f002 fc4e 	bl	8003f42 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	461a      	mov	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80016bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016c0:	b29c      	uxth	r4, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	461a      	mov	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	441a      	add	r2, r3
 80016d0:	4b45      	ldr	r3, [pc, #276]	; (80017e8 <PCD_EP_ISR_Handler+0x51c>)
 80016d2:	4323      	orrs	r3, r4
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	69da      	ldr	r2, [r3, #28]
 80016dc:	8bfb      	ldrh	r3, [r7, #30]
 80016de:	441a      	add	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	695a      	ldr	r2, [r3, #20]
 80016e8:	8bfb      	ldrh	r3, [r7, #30]
 80016ea:	441a      	add	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d004      	beq.n	8001702 <PCD_EP_ISR_Handler+0x436>
 80016f8:	8bfa      	ldrh	r2, [r7, #30]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d206      	bcs.n	8001710 <PCD_EP_ISR_Handler+0x444>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	4619      	mov	r1, r3
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff fcfd 	bl	8001108 <HAL_PCD_DataOutStageCallback>
 800170e:	e008      	b.n	8001722 <PCD_EP_ISR_Handler+0x456>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	7819      	ldrb	r1, [r3, #0]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	695a      	ldr	r2, [r3, #20]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff fd62 	bl	80011e6 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001722:	8a7b      	ldrh	r3, [r7, #18]
 8001724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001728:	2b00      	cmp	r3, #0
 800172a:	d04d      	beq.n	80017c8 <PCD_EP_ISR_Handler+0x4fc>
      {
        ep = &hpcd->IN_ep[epindex];
 800172c:	7d7b      	ldrb	r3, [r7, #21]
 800172e:	015b      	lsls	r3, r3, #5
 8001730:	3328      	adds	r3, #40	; 0x28
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	7d7b      	ldrb	r3, [r7, #21]
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	b29b      	uxth	r3, r3
 8001748:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800174c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001750:	b29c      	uxth	r4, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	7d7b      	ldrb	r3, [r7, #21]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	441a      	add	r2, r3
 800175e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001766:	b29b      	uxth	r3, r3
 8001768:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001772:	b29b      	uxth	r3, r3
 8001774:	461a      	mov	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	4413      	add	r3, r2
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6812      	ldr	r2, [r2, #0]
 8001782:	4413      	add	r3, r2
 8001784:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001788:	881b      	ldrh	r3, [r3, #0]
 800178a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	695a      	ldr	r2, [r3, #20]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	441a      	add	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d106      	bne.n	80017b6 <PCD_EP_ISR_Handler+0x4ea>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	4619      	mov	r1, r3
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff fcb6 	bl	8001120 <HAL_PCD_DataInStageCallback>
 80017b4:	e008      	b.n	80017c8 <PCD_EP_ISR_Handler+0x4fc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	7819      	ldrb	r1, [r3, #0]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	695a      	ldr	r2, [r3, #20]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff fd49 	bl	800125a <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	b21b      	sxth	r3, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f6ff ad7e 	blt.w	80012d6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3724      	adds	r7, #36	; 0x24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd90      	pop	{r4, r7, pc}
 80017e4:	ffff8080 	.word	0xffff8080
 80017e8:	ffff80c0 	.word	0xffff80c0

080017ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d102      	bne.n	8001806 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	f000 bf01 	b.w	8002608 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 8160 	beq.w	8001ad6 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001816:	4bae      	ldr	r3, [pc, #696]	; (8001ad0 <HAL_RCC_OscConfig+0x2e4>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 030c 	and.w	r3, r3, #12
 800181e:	2b04      	cmp	r3, #4
 8001820:	d00c      	beq.n	800183c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001822:	4bab      	ldr	r3, [pc, #684]	; (8001ad0 <HAL_RCC_OscConfig+0x2e4>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	2b08      	cmp	r3, #8
 800182c:	d159      	bne.n	80018e2 <HAL_RCC_OscConfig+0xf6>
 800182e:	4ba8      	ldr	r3, [pc, #672]	; (8001ad0 <HAL_RCC_OscConfig+0x2e4>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800183a:	d152      	bne.n	80018e2 <HAL_RCC_OscConfig+0xf6>
 800183c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001840:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001844:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001848:	fa93 f3a3 	rbit	r3, r3
 800184c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 8001850:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001854:	fab3 f383 	clz	r3, r3
 8001858:	b2db      	uxtb	r3, r3
 800185a:	095b      	lsrs	r3, r3, #5
 800185c:	b2db      	uxtb	r3, r3
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b01      	cmp	r3, #1
 8001866:	d102      	bne.n	800186e <HAL_RCC_OscConfig+0x82>
 8001868:	4b99      	ldr	r3, [pc, #612]	; (8001ad0 <HAL_RCC_OscConfig+0x2e4>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	e015      	b.n	800189a <HAL_RCC_OscConfig+0xae>
 800186e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001872:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001876:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800187a:	fa93 f3a3 	rbit	r3, r3
 800187e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001882:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001886:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800188a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800188e:	fa93 f3a3 	rbit	r3, r3
 8001892:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001896:	4b8e      	ldr	r3, [pc, #568]	; (8001ad0 <HAL_RCC_OscConfig+0x2e4>)
 8001898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800189e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80018a2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80018a6:	fa92 f2a2 	rbit	r2, r2
 80018aa:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80018ae:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80018b2:	fab2 f282 	clz	r2, r2
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	f042 0220 	orr.w	r2, r2, #32
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	f002 021f 	and.w	r2, r2, #31
 80018c2:	2101      	movs	r1, #1
 80018c4:	fa01 f202 	lsl.w	r2, r1, r2
 80018c8:	4013      	ands	r3, r2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 8102 	beq.w	8001ad4 <HAL_RCC_OscConfig+0x2e8>
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f040 80fc 	bne.w	8001ad4 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	f000 be93 	b.w	8002608 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ec:	d106      	bne.n	80018fc <HAL_RCC_OscConfig+0x110>
 80018ee:	4b78      	ldr	r3, [pc, #480]	; (8001ad0 <HAL_RCC_OscConfig+0x2e4>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a77      	ldr	r2, [pc, #476]	; (8001ad0 <HAL_RCC_OscConfig+0x2e4>)
 80018f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	e030      	b.n	800195e <HAL_RCC_OscConfig+0x172>
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10c      	bne.n	8001920 <HAL_RCC_OscConfig+0x134>
 8001906:	4b72      	ldr	r3, [pc, #456]	; (8001ad0 <HAL_RCC_OscConfig+0x2e4>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a71      	ldr	r2, [pc, #452]	; (8001ad0 <HAL_RCC_OscConfig+0x2e4>)
 800190c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	4b6f      	ldr	r3, [pc, #444]	; (8001ad0 <HAL_RCC_OscConfig+0x2e4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a6e      	ldr	r2, [pc, #440]	; (8001ad0 <HAL_RCC_OscConfig+0x2e4>)
 8001918:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	e01e      	b.n	800195e <HAL_RCC_OscConfig+0x172>
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800192a:	d10c      	bne.n	8001946 <HAL_RCC_OscConfig+0x15a>
 800192c:	4b68      	ldr	r3, [pc, #416]	; (8001ad0 <HAL_RCC_OscConfig+0x2e4>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a67      	ldr	r2, [pc, #412]	; (8001ad0 <HAL_RCC_OscConfig+0x2e4>)
 8001932:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	4b65      	ldr	r3, [pc, #404]	; (8001ad0 <HAL_RCC_OscConfig+0x2e4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a64      	ldr	r2, [pc, #400]	; (8001ad0 <HAL_RCC_OscConfig+0x2e4>)
 800193e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	e00b      	b.n	800195e <HAL_RCC_OscConfig+0x172>
 8001946:	4b62      	ldr	r3, [pc, #392]	; (8001ad0 <HAL_RCC_OscConfig+0x2e4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a61      	ldr	r2, [pc, #388]	; (8001ad0 <HAL_RCC_OscConfig+0x2e4>)
 800194c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	4b5f      	ldr	r3, [pc, #380]	; (8001ad0 <HAL_RCC_OscConfig+0x2e4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a5e      	ldr	r2, [pc, #376]	; (8001ad0 <HAL_RCC_OscConfig+0x2e4>)
 8001958:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800195c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d059      	beq.n	8001a1c <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7fe ff58 	bl	800081c <HAL_GetTick>
 800196c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001970:	e00a      	b.n	8001988 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001972:	f7fe ff53 	bl	800081c <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b64      	cmp	r3, #100	; 0x64
 8001980:	d902      	bls.n	8001988 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	f000 be40 	b.w	8002608 <HAL_RCC_OscConfig+0xe1c>
 8001988:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800198c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001990:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001994:	fa93 f3a3 	rbit	r3, r3
 8001998:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800199c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a0:	fab3 f383 	clz	r3, r3
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	095b      	lsrs	r3, r3, #5
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d102      	bne.n	80019ba <HAL_RCC_OscConfig+0x1ce>
 80019b4:	4b46      	ldr	r3, [pc, #280]	; (8001ad0 <HAL_RCC_OscConfig+0x2e4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	e015      	b.n	80019e6 <HAL_RCC_OscConfig+0x1fa>
 80019ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019be:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80019c6:	fa93 f3a3 	rbit	r3, r3
 80019ca:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80019ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019d2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80019d6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80019da:	fa93 f3a3 	rbit	r3, r3
 80019de:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80019e2:	4b3b      	ldr	r3, [pc, #236]	; (8001ad0 <HAL_RCC_OscConfig+0x2e4>)
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019ea:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80019ee:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80019f2:	fa92 f2a2 	rbit	r2, r2
 80019f6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80019fa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80019fe:	fab2 f282 	clz	r2, r2
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	f042 0220 	orr.w	r2, r2, #32
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	f002 021f 	and.w	r2, r2, #31
 8001a0e:	2101      	movs	r1, #1
 8001a10:	fa01 f202 	lsl.w	r2, r1, r2
 8001a14:	4013      	ands	r3, r2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0ab      	beq.n	8001972 <HAL_RCC_OscConfig+0x186>
 8001a1a:	e05c      	b.n	8001ad6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1c:	f7fe fefe 	bl	800081c <HAL_GetTick>
 8001a20:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a24:	e00a      	b.n	8001a3c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a26:	f7fe fef9 	bl	800081c <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b64      	cmp	r3, #100	; 0x64
 8001a34:	d902      	bls.n	8001a3c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	f000 bde6 	b.w	8002608 <HAL_RCC_OscConfig+0xe1c>
 8001a3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a40:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a44:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001a48:	fa93 f3a3 	rbit	r3, r3
 8001a4c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001a50:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a54:	fab3 f383 	clz	r3, r3
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	095b      	lsrs	r3, r3, #5
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d102      	bne.n	8001a6e <HAL_RCC_OscConfig+0x282>
 8001a68:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <HAL_RCC_OscConfig+0x2e4>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	e015      	b.n	8001a9a <HAL_RCC_OscConfig+0x2ae>
 8001a6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a72:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a76:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001a7a:	fa93 f3a3 	rbit	r3, r3
 8001a7e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001a82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a86:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001a8a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001a8e:	fa93 f3a3 	rbit	r3, r3
 8001a92:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <HAL_RCC_OscConfig+0x2e4>)
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a9e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001aa2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001aa6:	fa92 f2a2 	rbit	r2, r2
 8001aaa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001aae:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001ab2:	fab2 f282 	clz	r2, r2
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	f042 0220 	orr.w	r2, r2, #32
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	f002 021f 	and.w	r2, r2, #31
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1ab      	bne.n	8001a26 <HAL_RCC_OscConfig+0x23a>
 8001ace:	e002      	b.n	8001ad6 <HAL_RCC_OscConfig+0x2ea>
 8001ad0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad6:	1d3b      	adds	r3, r7, #4
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 8170 	beq.w	8001dc6 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ae6:	4bd0      	ldr	r3, [pc, #832]	; (8001e28 <HAL_RCC_OscConfig+0x63c>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 030c 	and.w	r3, r3, #12
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00c      	beq.n	8001b0c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001af2:	4bcd      	ldr	r3, [pc, #820]	; (8001e28 <HAL_RCC_OscConfig+0x63c>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 030c 	and.w	r3, r3, #12
 8001afa:	2b08      	cmp	r3, #8
 8001afc:	d16d      	bne.n	8001bda <HAL_RCC_OscConfig+0x3ee>
 8001afe:	4bca      	ldr	r3, [pc, #808]	; (8001e28 <HAL_RCC_OscConfig+0x63c>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001b06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b0a:	d166      	bne.n	8001bda <HAL_RCC_OscConfig+0x3ee>
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b12:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001b16:	fa93 f3a3 	rbit	r3, r3
 8001b1a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001b1e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b22:	fab3 f383 	clz	r3, r3
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	095b      	lsrs	r3, r3, #5
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d102      	bne.n	8001b3c <HAL_RCC_OscConfig+0x350>
 8001b36:	4bbc      	ldr	r3, [pc, #752]	; (8001e28 <HAL_RCC_OscConfig+0x63c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	e013      	b.n	8001b64 <HAL_RCC_OscConfig+0x378>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001b46:	fa93 f3a3 	rbit	r3, r3
 8001b4a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001b4e:	2302      	movs	r3, #2
 8001b50:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001b54:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001b58:	fa93 f3a3 	rbit	r3, r3
 8001b5c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001b60:	4bb1      	ldr	r3, [pc, #708]	; (8001e28 <HAL_RCC_OscConfig+0x63c>)
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	2202      	movs	r2, #2
 8001b66:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001b6a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001b6e:	fa92 f2a2 	rbit	r2, r2
 8001b72:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001b76:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001b7a:	fab2 f282 	clz	r2, r2
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	f042 0220 	orr.w	r2, r2, #32
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	f002 021f 	and.w	r2, r2, #31
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b90:	4013      	ands	r3, r2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d007      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x3ba>
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d002      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	f000 bd31 	b.w	8002608 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba6:	4ba0      	ldr	r3, [pc, #640]	; (8001e28 <HAL_RCC_OscConfig+0x63c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	21f8      	movs	r1, #248	; 0xf8
 8001bb6:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bba:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001bbe:	fa91 f1a1 	rbit	r1, r1
 8001bc2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001bc6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001bca:	fab1 f181 	clz	r1, r1
 8001bce:	b2c9      	uxtb	r1, r1
 8001bd0:	408b      	lsls	r3, r1
 8001bd2:	4995      	ldr	r1, [pc, #596]	; (8001e28 <HAL_RCC_OscConfig+0x63c>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd8:	e0f5      	b.n	8001dc6 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 8085 	beq.w	8001cf0 <HAL_RCC_OscConfig+0x504>
 8001be6:	2301      	movs	r3, #1
 8001be8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bec:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001bf0:	fa93 f3a3 	rbit	r3, r3
 8001bf4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001bf8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bfc:	fab3 f383 	clz	r3, r3
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c06:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	2301      	movs	r3, #1
 8001c10:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c12:	f7fe fe03 	bl	800081c <HAL_GetTick>
 8001c16:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1a:	e00a      	b.n	8001c32 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c1c:	f7fe fdfe 	bl	800081c <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d902      	bls.n	8001c32 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	f000 bceb 	b.w	8002608 <HAL_RCC_OscConfig+0xe1c>
 8001c32:	2302      	movs	r3, #2
 8001c34:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001c3c:	fa93 f3a3 	rbit	r3, r3
 8001c40:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001c44:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c48:	fab3 f383 	clz	r3, r3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	095b      	lsrs	r3, r3, #5
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d102      	bne.n	8001c62 <HAL_RCC_OscConfig+0x476>
 8001c5c:	4b72      	ldr	r3, [pc, #456]	; (8001e28 <HAL_RCC_OscConfig+0x63c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	e013      	b.n	8001c8a <HAL_RCC_OscConfig+0x49e>
 8001c62:	2302      	movs	r3, #2
 8001c64:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c68:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001c6c:	fa93 f3a3 	rbit	r3, r3
 8001c70:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001c74:	2302      	movs	r3, #2
 8001c76:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c7a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001c7e:	fa93 f3a3 	rbit	r3, r3
 8001c82:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001c86:	4b68      	ldr	r3, [pc, #416]	; (8001e28 <HAL_RCC_OscConfig+0x63c>)
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001c90:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001c94:	fa92 f2a2 	rbit	r2, r2
 8001c98:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001c9c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001ca0:	fab2 f282 	clz	r2, r2
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	f042 0220 	orr.w	r2, r2, #32
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	f002 021f 	and.w	r2, r2, #31
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0af      	beq.n	8001c1c <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cbc:	4b5a      	ldr	r3, [pc, #360]	; (8001e28 <HAL_RCC_OscConfig+0x63c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cc4:	1d3b      	adds	r3, r7, #4
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	21f8      	movs	r1, #248	; 0xf8
 8001ccc:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd0:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001cd4:	fa91 f1a1 	rbit	r1, r1
 8001cd8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001cdc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001ce0:	fab1 f181 	clz	r1, r1
 8001ce4:	b2c9      	uxtb	r1, r1
 8001ce6:	408b      	lsls	r3, r1
 8001ce8:	494f      	ldr	r1, [pc, #316]	; (8001e28 <HAL_RCC_OscConfig+0x63c>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	600b      	str	r3, [r1, #0]
 8001cee:	e06a      	b.n	8001dc6 <HAL_RCC_OscConfig+0x5da>
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001cfa:	fa93 f3a3 	rbit	r3, r3
 8001cfe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001d02:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d06:	fab3 f383 	clz	r3, r3
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	461a      	mov	r2, r3
 8001d18:	2300      	movs	r3, #0
 8001d1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7fe fd7e 	bl	800081c <HAL_GetTick>
 8001d20:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d24:	e00a      	b.n	8001d3c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d26:	f7fe fd79 	bl	800081c <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d902      	bls.n	8001d3c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	f000 bc66 	b.w	8002608 <HAL_RCC_OscConfig+0xe1c>
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001d46:	fa93 f3a3 	rbit	r3, r3
 8001d4a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001d4e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d52:	fab3 f383 	clz	r3, r3
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	095b      	lsrs	r3, r3, #5
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d102      	bne.n	8001d6c <HAL_RCC_OscConfig+0x580>
 8001d66:	4b30      	ldr	r3, [pc, #192]	; (8001e28 <HAL_RCC_OscConfig+0x63c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	e013      	b.n	8001d94 <HAL_RCC_OscConfig+0x5a8>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d76:	fa93 f3a3 	rbit	r3, r3
 8001d7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001d7e:	2302      	movs	r3, #2
 8001d80:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d84:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001d88:	fa93 f3a3 	rbit	r3, r3
 8001d8c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d90:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <HAL_RCC_OscConfig+0x63c>)
 8001d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d94:	2202      	movs	r2, #2
 8001d96:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001d9a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001d9e:	fa92 f2a2 	rbit	r2, r2
 8001da2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001da6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001daa:	fab2 f282 	clz	r2, r2
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	f042 0220 	orr.w	r2, r2, #32
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	f002 021f 	and.w	r2, r2, #31
 8001dba:	2101      	movs	r1, #1
 8001dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1af      	bne.n	8001d26 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0308 	and.w	r3, r3, #8
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 80da 	beq.w	8001f8a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d069      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x6c8>
 8001de0:	2301      	movs	r3, #1
 8001de2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001dea:	fa93 f3a3 	rbit	r3, r3
 8001dee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001df2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df6:	fab3 f383 	clz	r3, r3
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_RCC_OscConfig+0x640>)
 8001e00:	4413      	add	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	461a      	mov	r2, r3
 8001e06:	2301      	movs	r3, #1
 8001e08:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0a:	f7fe fd07 	bl	800081c <HAL_GetTick>
 8001e0e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e12:	e00d      	b.n	8001e30 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e14:	f7fe fd02 	bl	800081c <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d905      	bls.n	8001e30 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e3ef      	b.n	8002608 <HAL_RCC_OscConfig+0xe1c>
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	10908120 	.word	0x10908120
 8001e30:	2302      	movs	r3, #2
 8001e32:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001e3a:	fa93 f2a3 	rbit	r2, r3
 8001e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001e48:	2202      	movs	r2, #2
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	fa93 f2a3 	rbit	r2, r3
 8001e56:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001e60:	2202      	movs	r2, #2
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	fa93 f2a3 	rbit	r2, r3
 8001e6e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001e72:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e74:	4ba4      	ldr	r3, [pc, #656]	; (8002108 <HAL_RCC_OscConfig+0x91c>)
 8001e76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e78:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e7c:	2102      	movs	r1, #2
 8001e7e:	6019      	str	r1, [r3, #0]
 8001e80:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	fa93 f1a3 	rbit	r1, r3
 8001e8a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001e8e:	6019      	str	r1, [r3, #0]
  return result;
 8001e90:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	fab3 f383 	clz	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	f003 031f 	and.w	r3, r3, #31
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eac:	4013      	ands	r3, r2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0b0      	beq.n	8001e14 <HAL_RCC_OscConfig+0x628>
 8001eb2:	e06a      	b.n	8001f8a <HAL_RCC_OscConfig+0x79e>
 8001eb4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001eb8:	2201      	movs	r2, #1
 8001eba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	fa93 f2a3 	rbit	r2, r3
 8001ec6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001eca:	601a      	str	r2, [r3, #0]
  return result;
 8001ecc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001ed0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ed2:	fab3 f383 	clz	r3, r3
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4b8c      	ldr	r3, [pc, #560]	; (800210c <HAL_RCC_OscConfig+0x920>)
 8001edc:	4413      	add	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee6:	f7fe fc99 	bl	800081c <HAL_GetTick>
 8001eea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eee:	e009      	b.n	8001f04 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef0:	f7fe fc94 	bl	800081c <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e381      	b.n	8002608 <HAL_RCC_OscConfig+0xe1c>
 8001f04:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f08:	2202      	movs	r2, #2
 8001f0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	fa93 f2a3 	rbit	r2, r3
 8001f16:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f20:	2202      	movs	r2, #2
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	fa93 f2a3 	rbit	r2, r3
 8001f2e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f38:	2202      	movs	r2, #2
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	fa93 f2a3 	rbit	r2, r3
 8001f46:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001f4a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f4c:	4b6e      	ldr	r3, [pc, #440]	; (8002108 <HAL_RCC_OscConfig+0x91c>)
 8001f4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f50:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f54:	2102      	movs	r1, #2
 8001f56:	6019      	str	r1, [r3, #0]
 8001f58:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	fa93 f1a3 	rbit	r1, r3
 8001f62:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f66:	6019      	str	r1, [r3, #0]
  return result;
 8001f68:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	fab3 f383 	clz	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	f003 031f 	and.w	r3, r3, #31
 8001f7e:	2101      	movs	r1, #1
 8001f80:	fa01 f303 	lsl.w	r3, r1, r3
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1b2      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 8157 	beq.w	8002248 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fa0:	4b59      	ldr	r3, [pc, #356]	; (8002108 <HAL_RCC_OscConfig+0x91c>)
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d112      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fac:	4b56      	ldr	r3, [pc, #344]	; (8002108 <HAL_RCC_OscConfig+0x91c>)
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	4a55      	ldr	r2, [pc, #340]	; (8002108 <HAL_RCC_OscConfig+0x91c>)
 8001fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	61d3      	str	r3, [r2, #28]
 8001fb8:	4b53      	ldr	r3, [pc, #332]	; (8002108 <HAL_RCC_OscConfig+0x91c>)
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001fc0:	f107 030c 	add.w	r3, r7, #12
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	f107 030c 	add.w	r3, r7, #12
 8001fca:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd2:	4b4f      	ldr	r3, [pc, #316]	; (8002110 <HAL_RCC_OscConfig+0x924>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d11a      	bne.n	8002014 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fde:	4b4c      	ldr	r3, [pc, #304]	; (8002110 <HAL_RCC_OscConfig+0x924>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a4b      	ldr	r2, [pc, #300]	; (8002110 <HAL_RCC_OscConfig+0x924>)
 8001fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fea:	f7fe fc17 	bl	800081c <HAL_GetTick>
 8001fee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff2:	e009      	b.n	8002008 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff4:	f7fe fc12 	bl	800081c <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b64      	cmp	r3, #100	; 0x64
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e2ff      	b.n	8002608 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002008:	4b41      	ldr	r3, [pc, #260]	; (8002110 <HAL_RCC_OscConfig+0x924>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0ef      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002014:	1d3b      	adds	r3, r7, #4
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d106      	bne.n	800202c <HAL_RCC_OscConfig+0x840>
 800201e:	4b3a      	ldr	r3, [pc, #232]	; (8002108 <HAL_RCC_OscConfig+0x91c>)
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	4a39      	ldr	r2, [pc, #228]	; (8002108 <HAL_RCC_OscConfig+0x91c>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	6213      	str	r3, [r2, #32]
 800202a:	e02f      	b.n	800208c <HAL_RCC_OscConfig+0x8a0>
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10c      	bne.n	8002050 <HAL_RCC_OscConfig+0x864>
 8002036:	4b34      	ldr	r3, [pc, #208]	; (8002108 <HAL_RCC_OscConfig+0x91c>)
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	4a33      	ldr	r2, [pc, #204]	; (8002108 <HAL_RCC_OscConfig+0x91c>)
 800203c:	f023 0301 	bic.w	r3, r3, #1
 8002040:	6213      	str	r3, [r2, #32]
 8002042:	4b31      	ldr	r3, [pc, #196]	; (8002108 <HAL_RCC_OscConfig+0x91c>)
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	4a30      	ldr	r2, [pc, #192]	; (8002108 <HAL_RCC_OscConfig+0x91c>)
 8002048:	f023 0304 	bic.w	r3, r3, #4
 800204c:	6213      	str	r3, [r2, #32]
 800204e:	e01d      	b.n	800208c <HAL_RCC_OscConfig+0x8a0>
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2b05      	cmp	r3, #5
 8002058:	d10c      	bne.n	8002074 <HAL_RCC_OscConfig+0x888>
 800205a:	4b2b      	ldr	r3, [pc, #172]	; (8002108 <HAL_RCC_OscConfig+0x91c>)
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	4a2a      	ldr	r2, [pc, #168]	; (8002108 <HAL_RCC_OscConfig+0x91c>)
 8002060:	f043 0304 	orr.w	r3, r3, #4
 8002064:	6213      	str	r3, [r2, #32]
 8002066:	4b28      	ldr	r3, [pc, #160]	; (8002108 <HAL_RCC_OscConfig+0x91c>)
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	4a27      	ldr	r2, [pc, #156]	; (8002108 <HAL_RCC_OscConfig+0x91c>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	6213      	str	r3, [r2, #32]
 8002072:	e00b      	b.n	800208c <HAL_RCC_OscConfig+0x8a0>
 8002074:	4b24      	ldr	r3, [pc, #144]	; (8002108 <HAL_RCC_OscConfig+0x91c>)
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	4a23      	ldr	r2, [pc, #140]	; (8002108 <HAL_RCC_OscConfig+0x91c>)
 800207a:	f023 0301 	bic.w	r3, r3, #1
 800207e:	6213      	str	r3, [r2, #32]
 8002080:	4b21      	ldr	r3, [pc, #132]	; (8002108 <HAL_RCC_OscConfig+0x91c>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	4a20      	ldr	r2, [pc, #128]	; (8002108 <HAL_RCC_OscConfig+0x91c>)
 8002086:	f023 0304 	bic.w	r3, r3, #4
 800208a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800208c:	1d3b      	adds	r3, r7, #4
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d06a      	beq.n	800216c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002096:	f7fe fbc1 	bl	800081c <HAL_GetTick>
 800209a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800209e:	e00b      	b.n	80020b8 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020a0:	f7fe fbbc 	bl	800081c <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e2a7      	b.n	8002608 <HAL_RCC_OscConfig+0xe1c>
 80020b8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80020bc:	2202      	movs	r2, #2
 80020be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	fa93 f2a3 	rbit	r2, r3
 80020ca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80020d4:	2202      	movs	r2, #2
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	fa93 f2a3 	rbit	r2, r3
 80020e2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80020e6:	601a      	str	r2, [r3, #0]
  return result;
 80020e8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80020ec:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	095b      	lsrs	r3, r3, #5
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	f043 0302 	orr.w	r3, r3, #2
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d108      	bne.n	8002114 <HAL_RCC_OscConfig+0x928>
 8002102:	4b01      	ldr	r3, [pc, #4]	; (8002108 <HAL_RCC_OscConfig+0x91c>)
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	e013      	b.n	8002130 <HAL_RCC_OscConfig+0x944>
 8002108:	40021000 	.word	0x40021000
 800210c:	10908120 	.word	0x10908120
 8002110:	40007000 	.word	0x40007000
 8002114:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002118:	2202      	movs	r2, #2
 800211a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	fa93 f2a3 	rbit	r2, r3
 8002126:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	4bc0      	ldr	r3, [pc, #768]	; (8002430 <HAL_RCC_OscConfig+0xc44>)
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002134:	2102      	movs	r1, #2
 8002136:	6011      	str	r1, [r2, #0]
 8002138:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800213c:	6812      	ldr	r2, [r2, #0]
 800213e:	fa92 f1a2 	rbit	r1, r2
 8002142:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002146:	6011      	str	r1, [r2, #0]
  return result;
 8002148:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800214c:	6812      	ldr	r2, [r2, #0]
 800214e:	fab2 f282 	clz	r2, r2
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	f002 021f 	and.w	r2, r2, #31
 800215e:	2101      	movs	r1, #1
 8002160:	fa01 f202 	lsl.w	r2, r1, r2
 8002164:	4013      	ands	r3, r2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d09a      	beq.n	80020a0 <HAL_RCC_OscConfig+0x8b4>
 800216a:	e063      	b.n	8002234 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216c:	f7fe fb56 	bl	800081c <HAL_GetTick>
 8002170:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002174:	e00b      	b.n	800218e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002176:	f7fe fb51 	bl	800081c <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	f241 3288 	movw	r2, #5000	; 0x1388
 8002186:	4293      	cmp	r3, r2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e23c      	b.n	8002608 <HAL_RCC_OscConfig+0xe1c>
 800218e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002192:	2202      	movs	r2, #2
 8002194:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	fa93 f2a3 	rbit	r2, r3
 80021a0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021aa:	2202      	movs	r2, #2
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	fa93 f2a3 	rbit	r2, r3
 80021b8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80021bc:	601a      	str	r2, [r3, #0]
  return result;
 80021be:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80021c2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c4:	fab3 f383 	clz	r3, r3
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	095b      	lsrs	r3, r3, #5
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	f043 0302 	orr.w	r3, r3, #2
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d102      	bne.n	80021de <HAL_RCC_OscConfig+0x9f2>
 80021d8:	4b95      	ldr	r3, [pc, #596]	; (8002430 <HAL_RCC_OscConfig+0xc44>)
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	e00d      	b.n	80021fa <HAL_RCC_OscConfig+0xa0e>
 80021de:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80021e2:	2202      	movs	r2, #2
 80021e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	fa93 f2a3 	rbit	r2, r3
 80021f0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	4b8e      	ldr	r3, [pc, #568]	; (8002430 <HAL_RCC_OscConfig+0xc44>)
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80021fe:	2102      	movs	r1, #2
 8002200:	6011      	str	r1, [r2, #0]
 8002202:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002206:	6812      	ldr	r2, [r2, #0]
 8002208:	fa92 f1a2 	rbit	r1, r2
 800220c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002210:	6011      	str	r1, [r2, #0]
  return result;
 8002212:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	fab2 f282 	clz	r2, r2
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	f002 021f 	and.w	r2, r2, #31
 8002228:	2101      	movs	r1, #1
 800222a:	fa01 f202 	lsl.w	r2, r1, r2
 800222e:	4013      	ands	r3, r2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1a0      	bne.n	8002176 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002234:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002238:	2b01      	cmp	r3, #1
 800223a:	d105      	bne.n	8002248 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800223c:	4b7c      	ldr	r3, [pc, #496]	; (8002430 <HAL_RCC_OscConfig+0xc44>)
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	4a7b      	ldr	r2, [pc, #492]	; (8002430 <HAL_RCC_OscConfig+0xc44>)
 8002242:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002246:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002248:	1d3b      	adds	r3, r7, #4
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 81d9 	beq.w	8002606 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002254:	4b76      	ldr	r3, [pc, #472]	; (8002430 <HAL_RCC_OscConfig+0xc44>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 030c 	and.w	r3, r3, #12
 800225c:	2b08      	cmp	r3, #8
 800225e:	f000 81a6 	beq.w	80025ae <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002262:	1d3b      	adds	r3, r7, #4
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	2b02      	cmp	r3, #2
 800226a:	f040 811e 	bne.w	80024aa <HAL_RCC_OscConfig+0xcbe>
 800226e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002272:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002276:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002278:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	fa93 f2a3 	rbit	r2, r3
 8002282:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002286:	601a      	str	r2, [r3, #0]
  return result;
 8002288:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800228c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228e:	fab3 f383 	clz	r3, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002298:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	461a      	mov	r2, r3
 80022a0:	2300      	movs	r3, #0
 80022a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a4:	f7fe faba 	bl	800081c <HAL_GetTick>
 80022a8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ac:	e009      	b.n	80022c2 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ae:	f7fe fab5 	bl	800081c <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e1a2      	b.n	8002608 <HAL_RCC_OscConfig+0xe1c>
 80022c2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80022c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022cc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	fa93 f2a3 	rbit	r2, r3
 80022d6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80022da:	601a      	str	r2, [r3, #0]
  return result;
 80022dc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80022e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e2:	fab3 f383 	clz	r3, r3
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	095b      	lsrs	r3, r3, #5
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d102      	bne.n	80022fc <HAL_RCC_OscConfig+0xb10>
 80022f6:	4b4e      	ldr	r3, [pc, #312]	; (8002430 <HAL_RCC_OscConfig+0xc44>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	e01b      	b.n	8002334 <HAL_RCC_OscConfig+0xb48>
 80022fc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002300:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002304:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	fa93 f2a3 	rbit	r2, r3
 8002310:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800231a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	fa93 f2a3 	rbit	r2, r3
 800232a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	4b3f      	ldr	r3, [pc, #252]	; (8002430 <HAL_RCC_OscConfig+0xc44>)
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002338:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800233c:	6011      	str	r1, [r2, #0]
 800233e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	fa92 f1a2 	rbit	r1, r2
 8002348:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800234c:	6011      	str	r1, [r2, #0]
  return result;
 800234e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002352:	6812      	ldr	r2, [r2, #0]
 8002354:	fab2 f282 	clz	r2, r2
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	f042 0220 	orr.w	r2, r2, #32
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	f002 021f 	and.w	r2, r2, #31
 8002364:	2101      	movs	r1, #1
 8002366:	fa01 f202 	lsl.w	r2, r1, r2
 800236a:	4013      	ands	r3, r2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d19e      	bne.n	80022ae <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002370:	4b2f      	ldr	r3, [pc, #188]	; (8002430 <HAL_RCC_OscConfig+0xc44>)
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	f023 020f 	bic.w	r2, r3, #15
 8002378:	1d3b      	adds	r3, r7, #4
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	492c      	ldr	r1, [pc, #176]	; (8002430 <HAL_RCC_OscConfig+0xc44>)
 8002380:	4313      	orrs	r3, r2
 8002382:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002384:	4b2a      	ldr	r3, [pc, #168]	; (8002430 <HAL_RCC_OscConfig+0xc44>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800238c:	1d3b      	adds	r3, r7, #4
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6a19      	ldr	r1, [r3, #32]
 8002392:	1d3b      	adds	r3, r7, #4
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	430b      	orrs	r3, r1
 800239a:	4925      	ldr	r1, [pc, #148]	; (8002430 <HAL_RCC_OscConfig+0xc44>)
 800239c:	4313      	orrs	r3, r2
 800239e:	604b      	str	r3, [r1, #4]
 80023a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80023a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023aa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	fa93 f2a3 	rbit	r2, r3
 80023b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023b8:	601a      	str	r2, [r3, #0]
  return result;
 80023ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023be:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c0:	fab3 f383 	clz	r3, r3
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	461a      	mov	r2, r3
 80023d2:	2301      	movs	r3, #1
 80023d4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d6:	f7fe fa21 	bl	800081c <HAL_GetTick>
 80023da:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023de:	e009      	b.n	80023f4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023e0:	f7fe fa1c 	bl	800081c <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e109      	b.n	8002608 <HAL_RCC_OscConfig+0xe1c>
 80023f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	fa93 f2a3 	rbit	r2, r3
 8002408:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800240c:	601a      	str	r2, [r3, #0]
  return result;
 800240e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002412:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002414:	fab3 f383 	clz	r3, r3
 8002418:	b2db      	uxtb	r3, r3
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	b2db      	uxtb	r3, r3
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b01      	cmp	r3, #1
 8002426:	d105      	bne.n	8002434 <HAL_RCC_OscConfig+0xc48>
 8002428:	4b01      	ldr	r3, [pc, #4]	; (8002430 <HAL_RCC_OscConfig+0xc44>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	e01e      	b.n	800246c <HAL_RCC_OscConfig+0xc80>
 800242e:	bf00      	nop
 8002430:	40021000 	.word	0x40021000
 8002434:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002438:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800243c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	fa93 f2a3 	rbit	r2, r3
 8002448:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002452:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	fa93 f2a3 	rbit	r2, r3
 8002462:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	4b6a      	ldr	r3, [pc, #424]	; (8002614 <HAL_RCC_OscConfig+0xe28>)
 800246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002470:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002474:	6011      	str	r1, [r2, #0]
 8002476:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800247a:	6812      	ldr	r2, [r2, #0]
 800247c:	fa92 f1a2 	rbit	r1, r2
 8002480:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002484:	6011      	str	r1, [r2, #0]
  return result;
 8002486:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	fab2 f282 	clz	r2, r2
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	f042 0220 	orr.w	r2, r2, #32
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	f002 021f 	and.w	r2, r2, #31
 800249c:	2101      	movs	r1, #1
 800249e:	fa01 f202 	lsl.w	r2, r1, r2
 80024a2:	4013      	ands	r3, r2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d09b      	beq.n	80023e0 <HAL_RCC_OscConfig+0xbf4>
 80024a8:	e0ad      	b.n	8002606 <HAL_RCC_OscConfig+0xe1a>
 80024aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	fa93 f2a3 	rbit	r2, r3
 80024be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024c2:	601a      	str	r2, [r3, #0]
  return result;
 80024c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024c8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	461a      	mov	r2, r3
 80024dc:	2300      	movs	r3, #0
 80024de:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7fe f99c 	bl	800081c <HAL_GetTick>
 80024e4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e8:	e009      	b.n	80024fe <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ea:	f7fe f997 	bl	800081c <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e084      	b.n	8002608 <HAL_RCC_OscConfig+0xe1c>
 80024fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002502:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002506:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	fa93 f2a3 	rbit	r2, r3
 8002512:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002516:	601a      	str	r2, [r3, #0]
  return result;
 8002518:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800251c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	b2db      	uxtb	r3, r3
 8002524:	095b      	lsrs	r3, r3, #5
 8002526:	b2db      	uxtb	r3, r3
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b01      	cmp	r3, #1
 8002530:	d102      	bne.n	8002538 <HAL_RCC_OscConfig+0xd4c>
 8002532:	4b38      	ldr	r3, [pc, #224]	; (8002614 <HAL_RCC_OscConfig+0xe28>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	e01b      	b.n	8002570 <HAL_RCC_OscConfig+0xd84>
 8002538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800253c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002540:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	fa93 f2a3 	rbit	r2, r3
 800254c:	f107 0320 	add.w	r3, r7, #32
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	f107 031c 	add.w	r3, r7, #28
 8002556:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	f107 031c 	add.w	r3, r7, #28
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	fa93 f2a3 	rbit	r2, r3
 8002566:	f107 0318 	add.w	r3, r7, #24
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	4b29      	ldr	r3, [pc, #164]	; (8002614 <HAL_RCC_OscConfig+0xe28>)
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	f107 0214 	add.w	r2, r7, #20
 8002574:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002578:	6011      	str	r1, [r2, #0]
 800257a:	f107 0214 	add.w	r2, r7, #20
 800257e:	6812      	ldr	r2, [r2, #0]
 8002580:	fa92 f1a2 	rbit	r1, r2
 8002584:	f107 0210 	add.w	r2, r7, #16
 8002588:	6011      	str	r1, [r2, #0]
  return result;
 800258a:	f107 0210 	add.w	r2, r7, #16
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	fab2 f282 	clz	r2, r2
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	f042 0220 	orr.w	r2, r2, #32
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	f002 021f 	and.w	r2, r2, #31
 80025a0:	2101      	movs	r1, #1
 80025a2:	fa01 f202 	lsl.w	r2, r1, r2
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d19e      	bne.n	80024ea <HAL_RCC_OscConfig+0xcfe>
 80025ac:	e02b      	b.n	8002606 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025ae:	1d3b      	adds	r3, r7, #4
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e025      	b.n	8002608 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025bc:	4b15      	ldr	r3, [pc, #84]	; (8002614 <HAL_RCC_OscConfig+0xe28>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80025c4:	4b13      	ldr	r3, [pc, #76]	; (8002614 <HAL_RCC_OscConfig+0xe28>)
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80025d0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80025d4:	1d3b      	adds	r3, r7, #4
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d111      	bne.n	8002602 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80025de:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80025e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025e6:	1d3b      	adds	r3, r7, #4
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d108      	bne.n	8002602 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80025f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025f4:	f003 020f 	and.w	r2, r3, #15
 80025f8:	1d3b      	adds	r3, r7, #4
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80025fe:	429a      	cmp	r2, r3
 8002600:	d001      	beq.n	8002606 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40021000 	.word	0x40021000

08002618 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b09e      	sub	sp, #120	; 0x78
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002622:	2300      	movs	r3, #0
 8002624:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e162      	b.n	80028f6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002630:	4b90      	ldr	r3, [pc, #576]	; (8002874 <HAL_RCC_ClockConfig+0x25c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d910      	bls.n	8002660 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263e:	4b8d      	ldr	r3, [pc, #564]	; (8002874 <HAL_RCC_ClockConfig+0x25c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f023 0207 	bic.w	r2, r3, #7
 8002646:	498b      	ldr	r1, [pc, #556]	; (8002874 <HAL_RCC_ClockConfig+0x25c>)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	4313      	orrs	r3, r2
 800264c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800264e:	4b89      	ldr	r3, [pc, #548]	; (8002874 <HAL_RCC_ClockConfig+0x25c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d001      	beq.n	8002660 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e14a      	b.n	80028f6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800266c:	4b82      	ldr	r3, [pc, #520]	; (8002878 <HAL_RCC_ClockConfig+0x260>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	497f      	ldr	r1, [pc, #508]	; (8002878 <HAL_RCC_ClockConfig+0x260>)
 800267a:	4313      	orrs	r3, r2
 800267c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 80dc 	beq.w	8002844 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d13c      	bne.n	800270e <HAL_RCC_ClockConfig+0xf6>
 8002694:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002698:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800269c:	fa93 f3a3 	rbit	r3, r3
 80026a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80026a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a4:	fab3 f383 	clz	r3, r3
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	095b      	lsrs	r3, r3, #5
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d102      	bne.n	80026be <HAL_RCC_ClockConfig+0xa6>
 80026b8:	4b6f      	ldr	r3, [pc, #444]	; (8002878 <HAL_RCC_ClockConfig+0x260>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	e00f      	b.n	80026de <HAL_RCC_ClockConfig+0xc6>
 80026be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026c6:	fa93 f3a3 	rbit	r3, r3
 80026ca:	667b      	str	r3, [r7, #100]	; 0x64
 80026cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026d0:	663b      	str	r3, [r7, #96]	; 0x60
 80026d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026d4:	fa93 f3a3 	rbit	r3, r3
 80026d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026da:	4b67      	ldr	r3, [pc, #412]	; (8002878 <HAL_RCC_ClockConfig+0x260>)
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80026e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026e6:	fa92 f2a2 	rbit	r2, r2
 80026ea:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80026ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80026ee:	fab2 f282 	clz	r2, r2
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	f042 0220 	orr.w	r2, r2, #32
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	f002 021f 	and.w	r2, r2, #31
 80026fe:	2101      	movs	r1, #1
 8002700:	fa01 f202 	lsl.w	r2, r1, r2
 8002704:	4013      	ands	r3, r2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d17b      	bne.n	8002802 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e0f3      	b.n	80028f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d13c      	bne.n	8002790 <HAL_RCC_ClockConfig+0x178>
 8002716:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800271a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002726:	fab3 f383 	clz	r3, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	095b      	lsrs	r3, r3, #5
 800272e:	b2db      	uxtb	r3, r3
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b01      	cmp	r3, #1
 8002738:	d102      	bne.n	8002740 <HAL_RCC_ClockConfig+0x128>
 800273a:	4b4f      	ldr	r3, [pc, #316]	; (8002878 <HAL_RCC_ClockConfig+0x260>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	e00f      	b.n	8002760 <HAL_RCC_ClockConfig+0x148>
 8002740:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002744:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002748:	fa93 f3a3 	rbit	r3, r3
 800274c:	647b      	str	r3, [r7, #68]	; 0x44
 800274e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002752:	643b      	str	r3, [r7, #64]	; 0x40
 8002754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800275c:	4b46      	ldr	r3, [pc, #280]	; (8002878 <HAL_RCC_ClockConfig+0x260>)
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002764:	63ba      	str	r2, [r7, #56]	; 0x38
 8002766:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002768:	fa92 f2a2 	rbit	r2, r2
 800276c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800276e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002770:	fab2 f282 	clz	r2, r2
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	f042 0220 	orr.w	r2, r2, #32
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	f002 021f 	and.w	r2, r2, #31
 8002780:	2101      	movs	r1, #1
 8002782:	fa01 f202 	lsl.w	r2, r1, r2
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d13a      	bne.n	8002802 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e0b2      	b.n	80028f6 <HAL_RCC_ClockConfig+0x2de>
 8002790:	2302      	movs	r3, #2
 8002792:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002796:	fa93 f3a3 	rbit	r3, r3
 800279a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800279c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279e:	fab3 f383 	clz	r3, r3
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	095b      	lsrs	r3, r3, #5
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d102      	bne.n	80027b8 <HAL_RCC_ClockConfig+0x1a0>
 80027b2:	4b31      	ldr	r3, [pc, #196]	; (8002878 <HAL_RCC_ClockConfig+0x260>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	e00d      	b.n	80027d4 <HAL_RCC_ClockConfig+0x1bc>
 80027b8:	2302      	movs	r3, #2
 80027ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027be:	fa93 f3a3 	rbit	r3, r3
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
 80027c4:	2302      	movs	r3, #2
 80027c6:	623b      	str	r3, [r7, #32]
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	61fb      	str	r3, [r7, #28]
 80027d0:	4b29      	ldr	r3, [pc, #164]	; (8002878 <HAL_RCC_ClockConfig+0x260>)
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	2202      	movs	r2, #2
 80027d6:	61ba      	str	r2, [r7, #24]
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	fa92 f2a2 	rbit	r2, r2
 80027de:	617a      	str	r2, [r7, #20]
  return result;
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	fab2 f282 	clz	r2, r2
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	f042 0220 	orr.w	r2, r2, #32
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	f002 021f 	and.w	r2, r2, #31
 80027f2:	2101      	movs	r1, #1
 80027f4:	fa01 f202 	lsl.w	r2, r1, r2
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e079      	b.n	80028f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002802:	4b1d      	ldr	r3, [pc, #116]	; (8002878 <HAL_RCC_ClockConfig+0x260>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f023 0203 	bic.w	r2, r3, #3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	491a      	ldr	r1, [pc, #104]	; (8002878 <HAL_RCC_ClockConfig+0x260>)
 8002810:	4313      	orrs	r3, r2
 8002812:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002814:	f7fe f802 	bl	800081c <HAL_GetTick>
 8002818:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281a:	e00a      	b.n	8002832 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800281c:	f7fd fffe 	bl	800081c <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	f241 3288 	movw	r2, #5000	; 0x1388
 800282a:	4293      	cmp	r3, r2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e061      	b.n	80028f6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002832:	4b11      	ldr	r3, [pc, #68]	; (8002878 <HAL_RCC_ClockConfig+0x260>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f003 020c 	and.w	r2, r3, #12
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	429a      	cmp	r2, r3
 8002842:	d1eb      	bne.n	800281c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <HAL_RCC_ClockConfig+0x25c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	d214      	bcs.n	800287c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002852:	4b08      	ldr	r3, [pc, #32]	; (8002874 <HAL_RCC_ClockConfig+0x25c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f023 0207 	bic.w	r2, r3, #7
 800285a:	4906      	ldr	r1, [pc, #24]	; (8002874 <HAL_RCC_ClockConfig+0x25c>)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	4313      	orrs	r3, r2
 8002860:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002862:	4b04      	ldr	r3, [pc, #16]	; (8002874 <HAL_RCC_ClockConfig+0x25c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d005      	beq.n	800287c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e040      	b.n	80028f6 <HAL_RCC_ClockConfig+0x2de>
 8002874:	40022000 	.word	0x40022000
 8002878:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002888:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <HAL_RCC_ClockConfig+0x2e8>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	491a      	ldr	r1, [pc, #104]	; (8002900 <HAL_RCC_ClockConfig+0x2e8>)
 8002896:	4313      	orrs	r3, r2
 8002898:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d009      	beq.n	80028ba <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028a6:	4b16      	ldr	r3, [pc, #88]	; (8002900 <HAL_RCC_ClockConfig+0x2e8>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	4912      	ldr	r1, [pc, #72]	; (8002900 <HAL_RCC_ClockConfig+0x2e8>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028ba:	f000 f829 	bl	8002910 <HAL_RCC_GetSysClockFreq>
 80028be:	4601      	mov	r1, r0
 80028c0:	4b0f      	ldr	r3, [pc, #60]	; (8002900 <HAL_RCC_ClockConfig+0x2e8>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028c8:	22f0      	movs	r2, #240	; 0xf0
 80028ca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	fa92 f2a2 	rbit	r2, r2
 80028d2:	60fa      	str	r2, [r7, #12]
  return result;
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	fab2 f282 	clz	r2, r2
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	40d3      	lsrs	r3, r2
 80028de:	4a09      	ldr	r2, [pc, #36]	; (8002904 <HAL_RCC_ClockConfig+0x2ec>)
 80028e0:	5cd3      	ldrb	r3, [r2, r3]
 80028e2:	fa21 f303 	lsr.w	r3, r1, r3
 80028e6:	4a08      	ldr	r2, [pc, #32]	; (8002908 <HAL_RCC_ClockConfig+0x2f0>)
 80028e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80028ea:	4b08      	ldr	r3, [pc, #32]	; (800290c <HAL_RCC_ClockConfig+0x2f4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fd ff50 	bl	8000794 <HAL_InitTick>
  
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3778      	adds	r7, #120	; 0x78
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000
 8002904:	0800404c 	.word	0x0800404c
 8002908:	20000000 	.word	0x20000000
 800290c:	20000004 	.word	0x20000004

08002910 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002910:	b480      	push	{r7}
 8002912:	b08b      	sub	sp, #44	; 0x2c
 8002914:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	2300      	movs	r3, #0
 800291c:	61bb      	str	r3, [r7, #24]
 800291e:	2300      	movs	r3, #0
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800292a:	4b2a      	ldr	r3, [pc, #168]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	f003 030c 	and.w	r3, r3, #12
 8002936:	2b04      	cmp	r3, #4
 8002938:	d002      	beq.n	8002940 <HAL_RCC_GetSysClockFreq+0x30>
 800293a:	2b08      	cmp	r3, #8
 800293c:	d003      	beq.n	8002946 <HAL_RCC_GetSysClockFreq+0x36>
 800293e:	e03f      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002940:	4b25      	ldr	r3, [pc, #148]	; (80029d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002942:	623b      	str	r3, [r7, #32]
      break;
 8002944:	e03f      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800294c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002950:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	fa92 f2a2 	rbit	r2, r2
 8002958:	607a      	str	r2, [r7, #4]
  return result;
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	fab2 f282 	clz	r2, r2
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	40d3      	lsrs	r3, r2
 8002964:	4a1d      	ldr	r2, [pc, #116]	; (80029dc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002966:	5cd3      	ldrb	r3, [r2, r3]
 8002968:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800296a:	4b1a      	ldr	r3, [pc, #104]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800296c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	220f      	movs	r2, #15
 8002974:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	fa92 f2a2 	rbit	r2, r2
 800297c:	60fa      	str	r2, [r7, #12]
  return result;
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	fab2 f282 	clz	r2, r2
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	40d3      	lsrs	r3, r2
 8002988:	4a15      	ldr	r2, [pc, #84]	; (80029e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800298a:	5cd3      	ldrb	r3, [r2, r3]
 800298c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d008      	beq.n	80029aa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002998:	4a0f      	ldr	r2, [pc, #60]	; (80029d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	fbb2 f2f3 	udiv	r2, r2, r3
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	fb02 f303 	mul.w	r3, r2, r3
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
 80029a8:	e007      	b.n	80029ba <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80029aa:	4a0b      	ldr	r2, [pc, #44]	; (80029d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	fb02 f303 	mul.w	r3, r2, r3
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	623b      	str	r3, [r7, #32]
      break;
 80029be:	e002      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029c0:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80029c2:	623b      	str	r3, [r7, #32]
      break;
 80029c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029c6:	6a3b      	ldr	r3, [r7, #32]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	372c      	adds	r7, #44	; 0x2c
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	40021000 	.word	0x40021000
 80029d8:	007a1200 	.word	0x007a1200
 80029dc:	08004064 	.word	0x08004064
 80029e0:	08004074 	.word	0x08004074

080029e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029e8:	4b03      	ldr	r3, [pc, #12]	; (80029f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80029ea:	681b      	ldr	r3, [r3, #0]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	20000000 	.word	0x20000000

080029fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002a02:	f7ff ffef 	bl	80029e4 <HAL_RCC_GetHCLKFreq>
 8002a06:	4601      	mov	r1, r0
 8002a08:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a10:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a14:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	fa92 f2a2 	rbit	r2, r2
 8002a1c:	603a      	str	r2, [r7, #0]
  return result;
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	fab2 f282 	clz	r2, r2
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	40d3      	lsrs	r3, r2
 8002a28:	4a04      	ldr	r2, [pc, #16]	; (8002a3c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002a2a:	5cd3      	ldrb	r3, [r2, r3]
 8002a2c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	0800405c 	.word	0x0800405c

08002a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002a46:	f7ff ffcd 	bl	80029e4 <HAL_RCC_GetHCLKFreq>
 8002a4a:	4601      	mov	r1, r0
 8002a4c:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002a54:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002a58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	fa92 f2a2 	rbit	r2, r2
 8002a60:	603a      	str	r2, [r7, #0]
  return result;
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	fab2 f282 	clz	r2, r2
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	40d3      	lsrs	r3, r2
 8002a6c:	4a04      	ldr	r2, [pc, #16]	; (8002a80 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002a6e:	5cd3      	ldrb	r3, [r2, r3]
 8002a70:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002a74:	4618      	mov	r0, r3
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	0800405c 	.word	0x0800405c

08002a84 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b092      	sub	sp, #72	; 0x48
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 80d7 	beq.w	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aa8:	4b4e      	ldr	r3, [pc, #312]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10e      	bne.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab4:	4b4b      	ldr	r3, [pc, #300]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	4a4a      	ldr	r2, [pc, #296]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002abe:	61d3      	str	r3, [r2, #28]
 8002ac0:	4b48      	ldr	r3, [pc, #288]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002acc:	2301      	movs	r3, #1
 8002ace:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad2:	4b45      	ldr	r3, [pc, #276]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d118      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ade:	4b42      	ldr	r3, [pc, #264]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a41      	ldr	r2, [pc, #260]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aea:	f7fd fe97 	bl	800081c <HAL_GetTick>
 8002aee:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af0:	e008      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af2:	f7fd fe93 	bl	800081c <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b64      	cmp	r3, #100	; 0x64
 8002afe:	d901      	bls.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e1d6      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b04:	4b38      	ldr	r3, [pc, #224]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0f0      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b10:	4b34      	ldr	r3, [pc, #208]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b18:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 8084 	beq.w	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d07c      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b30:	4b2c      	ldr	r3, [pc, #176]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b42:	fa93 f3a3 	rbit	r3, r3
 8002b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b4a:	fab3 f383 	clz	r3, r3
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b26      	ldr	r3, [pc, #152]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b54:	4413      	add	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	461a      	mov	r2, r3
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b66:	fa93 f3a3 	rbit	r3, r3
 8002b6a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b6e:	fab3 f383 	clz	r3, r3
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	461a      	mov	r2, r3
 8002b76:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b78:	4413      	add	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	2300      	movs	r3, #0
 8002b80:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b82:	4a18      	ldr	r2, [pc, #96]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b86:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d04b      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b92:	f7fd fe43 	bl	800081c <HAL_GetTick>
 8002b96:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b98:	e00a      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b9a:	f7fd fe3f 	bl	800081c <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e180      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	627b      	str	r3, [r7, #36]	; 0x24
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	623b      	str	r3, [r7, #32]
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	fa93 f3a3 	rbit	r3, r3
 8002bc6:	61fb      	str	r3, [r7, #28]
  return result;
 8002bc8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bca:	fab3 f383 	clz	r3, r3
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	095b      	lsrs	r3, r3, #5
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	f043 0302 	orr.w	r3, r3, #2
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d108      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002bde:	4b01      	ldr	r3, [pc, #4]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	e00d      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002be4:	40021000 	.word	0x40021000
 8002be8:	40007000 	.word	0x40007000
 8002bec:	10908100 	.word	0x10908100
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	4ba0      	ldr	r3, [pc, #640]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	2202      	movs	r2, #2
 8002c02:	613a      	str	r2, [r7, #16]
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	fa92 f2a2 	rbit	r2, r2
 8002c0a:	60fa      	str	r2, [r7, #12]
  return result;
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	fab2 f282 	clz	r2, r2
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	f002 021f 	and.w	r2, r2, #31
 8002c1e:	2101      	movs	r1, #1
 8002c20:	fa01 f202 	lsl.w	r2, r1, r2
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0b7      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002c2a:	4b95      	ldr	r3, [pc, #596]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	4992      	ldr	r1, [pc, #584]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c3c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d105      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c44:	4b8e      	ldr	r3, [pc, #568]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	4a8d      	ldr	r2, [pc, #564]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c5c:	4b88      	ldr	r3, [pc, #544]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	f023 0203 	bic.w	r2, r3, #3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	4985      	ldr	r1, [pc, #532]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d008      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c7a:	4b81      	ldr	r3, [pc, #516]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	497e      	ldr	r1, [pc, #504]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c98:	4b79      	ldr	r3, [pc, #484]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	4976      	ldr	r1, [pc, #472]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0320 	and.w	r3, r3, #32
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d008      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cb6:	4b72      	ldr	r3, [pc, #456]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	f023 0210 	bic.w	r2, r3, #16
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	496f      	ldr	r1, [pc, #444]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d008      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002cd4:	4b6a      	ldr	r3, [pc, #424]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce0:	4967      	ldr	r1, [pc, #412]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d008      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cf2:	4b63      	ldr	r3, [pc, #396]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	f023 0220 	bic.w	r2, r3, #32
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	4960      	ldr	r1, [pc, #384]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d10:	4b5b      	ldr	r3, [pc, #364]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	4958      	ldr	r1, [pc, #352]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d008      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d2e:	4b54      	ldr	r3, [pc, #336]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	4951      	ldr	r1, [pc, #324]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0310 	and.w	r3, r3, #16
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d4c:	4b4c      	ldr	r3, [pc, #304]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	4949      	ldr	r1, [pc, #292]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d008      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d6a:	4b45      	ldr	r3, [pc, #276]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	4942      	ldr	r1, [pc, #264]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d008      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d88:	4b3d      	ldr	r3, [pc, #244]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d94:	493a      	ldr	r1, [pc, #232]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d008      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002da6:	4b36      	ldr	r3, [pc, #216]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002daa:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db2:	4933      	ldr	r1, [pc, #204]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d008      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002dc4:	4b2e      	ldr	r3, [pc, #184]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd0:	492b      	ldr	r1, [pc, #172]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d008      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002de2:	4b27      	ldr	r3, [pc, #156]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	4924      	ldr	r1, [pc, #144]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d008      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002e00:	4b1f      	ldr	r3, [pc, #124]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e04:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0c:	491c      	ldr	r1, [pc, #112]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d008      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002e1e:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2a:	4915      	ldr	r1, [pc, #84]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002e3c:	4b10      	ldr	r3, [pc, #64]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e40:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e48:	490d      	ldr	r1, [pc, #52]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d008      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002e5a:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e66:	4906      	ldr	r1, [pc, #24]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00c      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002e78:	4b01      	ldr	r3, [pc, #4]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	e002      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002e7e:	bf00      	nop
 8002e80:	40021000 	.word	0x40021000
 8002e84:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e8c:	490b      	ldr	r1, [pc, #44]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d008      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002e9e:	4b07      	ldr	r3, [pc, #28]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eaa:	4904      	ldr	r1, [pc, #16]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3748      	adds	r7, #72	; 0x48
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40021000 	.word	0x40021000

08002ec0 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e083      	b.n	8002fda <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	7f5b      	ldrb	r3, [r3, #29]
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d105      	bne.n	8002ee8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fd fb38 	bl	8000558 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	22ca      	movs	r2, #202	; 0xca
 8002ef4:	625a      	str	r2, [r3, #36]	; 0x24
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2253      	movs	r2, #83	; 0x53
 8002efc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f897 	bl	8003032 <RTC_EnterInitMode>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d008      	beq.n	8002f1c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	22ff      	movs	r2, #255	; 0xff
 8002f10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2204      	movs	r2, #4
 8002f16:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e05e      	b.n	8002fda <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6812      	ldr	r2, [r2, #0]
 8002f26:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002f2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f2e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6899      	ldr	r1, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	431a      	orrs	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	68d2      	ldr	r2, [r2, #12]
 8002f56:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6919      	ldr	r1, [r3, #16]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	041a      	lsls	r2, r3, #16
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f7a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 0320 	and.w	r3, r3, #32
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10e      	bne.n	8002fa8 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f829 	bl	8002fe2 <HAL_RTC_WaitForSynchro>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d008      	beq.n	8002fa8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	22ff      	movs	r2, #255	; 0xff
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2204      	movs	r2, #4
 8002fa2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e018      	b.n	8002fda <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fb6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699a      	ldr	r2, [r3, #24]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	22ff      	movs	r2, #255	; 0xff
 8002fd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
  }
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b084      	sub	sp, #16
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ffc:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002ffe:	f7fd fc0d 	bl	800081c <HAL_GetTick>
 8003002:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003004:	e009      	b.n	800301a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003006:	f7fd fc09 	bl	800081c <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003014:	d901      	bls.n	800301a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e007      	b.n	800302a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f003 0320 	and.w	r3, r3, #32
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0ee      	beq.n	8003006 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003048:	2b00      	cmp	r3, #0
 800304a:	d119      	bne.n	8003080 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f04f 32ff 	mov.w	r2, #4294967295
 8003054:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003056:	f7fd fbe1 	bl	800081c <HAL_GetTick>
 800305a:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800305c:	e009      	b.n	8003072 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800305e:	f7fd fbdd 	bl	800081c <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800306c:	d901      	bls.n	8003072 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e007      	b.n	8003082 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0ee      	beq.n	800305e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b082      	sub	sp, #8
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e040      	b.n	800311e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d106      	bne.n	80030b2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7fd fa79 	bl	80005a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2224      	movs	r2, #36	; 0x24
 80030b6:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0201 	bic.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f82d 	bl	8003128 <UART_SetConfig>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d101      	bne.n	80030d8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e022      	b.n	800311e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 fa3b 	bl	800355c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003104:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f042 0201 	orr.w	r2, r2, #1
 8003114:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 fac2 	bl	80036a0 <UART_CheckIdleState>
 800311c:	4603      	mov	r3, r0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
	...

08003128 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003130:	2300      	movs	r3, #0
 8003132:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	431a      	orrs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	4313      	orrs	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	4bac      	ldr	r3, [pc, #688]	; (8003408 <UART_SetConfig+0x2e0>)
 8003158:	4013      	ands	r3, r2
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6812      	ldr	r2, [r2, #0]
 800315e:	6939      	ldr	r1, [r7, #16]
 8003160:	430b      	orrs	r3, r1
 8003162:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	430a      	orrs	r2, r1
 800319c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a9a      	ldr	r2, [pc, #616]	; (800340c <UART_SetConfig+0x2e4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d121      	bne.n	80031ec <UART_SetConfig+0xc4>
 80031a8:	4b99      	ldr	r3, [pc, #612]	; (8003410 <UART_SetConfig+0x2e8>)
 80031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ac:	f003 0303 	and.w	r3, r3, #3
 80031b0:	2b03      	cmp	r3, #3
 80031b2:	d817      	bhi.n	80031e4 <UART_SetConfig+0xbc>
 80031b4:	a201      	add	r2, pc, #4	; (adr r2, 80031bc <UART_SetConfig+0x94>)
 80031b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ba:	bf00      	nop
 80031bc:	080031cd 	.word	0x080031cd
 80031c0:	080031d9 	.word	0x080031d9
 80031c4:	080031df 	.word	0x080031df
 80031c8:	080031d3 	.word	0x080031d3
 80031cc:	2301      	movs	r3, #1
 80031ce:	77fb      	strb	r3, [r7, #31]
 80031d0:	e0b2      	b.n	8003338 <UART_SetConfig+0x210>
 80031d2:	2302      	movs	r3, #2
 80031d4:	77fb      	strb	r3, [r7, #31]
 80031d6:	e0af      	b.n	8003338 <UART_SetConfig+0x210>
 80031d8:	2304      	movs	r3, #4
 80031da:	77fb      	strb	r3, [r7, #31]
 80031dc:	e0ac      	b.n	8003338 <UART_SetConfig+0x210>
 80031de:	2308      	movs	r3, #8
 80031e0:	77fb      	strb	r3, [r7, #31]
 80031e2:	e0a9      	b.n	8003338 <UART_SetConfig+0x210>
 80031e4:	2310      	movs	r3, #16
 80031e6:	77fb      	strb	r3, [r7, #31]
 80031e8:	bf00      	nop
 80031ea:	e0a5      	b.n	8003338 <UART_SetConfig+0x210>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a88      	ldr	r2, [pc, #544]	; (8003414 <UART_SetConfig+0x2ec>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d123      	bne.n	800323e <UART_SetConfig+0x116>
 80031f6:	4b86      	ldr	r3, [pc, #536]	; (8003410 <UART_SetConfig+0x2e8>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003202:	d012      	beq.n	800322a <UART_SetConfig+0x102>
 8003204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003208:	d802      	bhi.n	8003210 <UART_SetConfig+0xe8>
 800320a:	2b00      	cmp	r3, #0
 800320c:	d007      	beq.n	800321e <UART_SetConfig+0xf6>
 800320e:	e012      	b.n	8003236 <UART_SetConfig+0x10e>
 8003210:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003214:	d00c      	beq.n	8003230 <UART_SetConfig+0x108>
 8003216:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800321a:	d003      	beq.n	8003224 <UART_SetConfig+0xfc>
 800321c:	e00b      	b.n	8003236 <UART_SetConfig+0x10e>
 800321e:	2300      	movs	r3, #0
 8003220:	77fb      	strb	r3, [r7, #31]
 8003222:	e089      	b.n	8003338 <UART_SetConfig+0x210>
 8003224:	2302      	movs	r3, #2
 8003226:	77fb      	strb	r3, [r7, #31]
 8003228:	e086      	b.n	8003338 <UART_SetConfig+0x210>
 800322a:	2304      	movs	r3, #4
 800322c:	77fb      	strb	r3, [r7, #31]
 800322e:	e083      	b.n	8003338 <UART_SetConfig+0x210>
 8003230:	2308      	movs	r3, #8
 8003232:	77fb      	strb	r3, [r7, #31]
 8003234:	e080      	b.n	8003338 <UART_SetConfig+0x210>
 8003236:	2310      	movs	r3, #16
 8003238:	77fb      	strb	r3, [r7, #31]
 800323a:	bf00      	nop
 800323c:	e07c      	b.n	8003338 <UART_SetConfig+0x210>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a75      	ldr	r2, [pc, #468]	; (8003418 <UART_SetConfig+0x2f0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d123      	bne.n	8003290 <UART_SetConfig+0x168>
 8003248:	4b71      	ldr	r3, [pc, #452]	; (8003410 <UART_SetConfig+0x2e8>)
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003250:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003254:	d012      	beq.n	800327c <UART_SetConfig+0x154>
 8003256:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800325a:	d802      	bhi.n	8003262 <UART_SetConfig+0x13a>
 800325c:	2b00      	cmp	r3, #0
 800325e:	d007      	beq.n	8003270 <UART_SetConfig+0x148>
 8003260:	e012      	b.n	8003288 <UART_SetConfig+0x160>
 8003262:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003266:	d00c      	beq.n	8003282 <UART_SetConfig+0x15a>
 8003268:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800326c:	d003      	beq.n	8003276 <UART_SetConfig+0x14e>
 800326e:	e00b      	b.n	8003288 <UART_SetConfig+0x160>
 8003270:	2300      	movs	r3, #0
 8003272:	77fb      	strb	r3, [r7, #31]
 8003274:	e060      	b.n	8003338 <UART_SetConfig+0x210>
 8003276:	2302      	movs	r3, #2
 8003278:	77fb      	strb	r3, [r7, #31]
 800327a:	e05d      	b.n	8003338 <UART_SetConfig+0x210>
 800327c:	2304      	movs	r3, #4
 800327e:	77fb      	strb	r3, [r7, #31]
 8003280:	e05a      	b.n	8003338 <UART_SetConfig+0x210>
 8003282:	2308      	movs	r3, #8
 8003284:	77fb      	strb	r3, [r7, #31]
 8003286:	e057      	b.n	8003338 <UART_SetConfig+0x210>
 8003288:	2310      	movs	r3, #16
 800328a:	77fb      	strb	r3, [r7, #31]
 800328c:	bf00      	nop
 800328e:	e053      	b.n	8003338 <UART_SetConfig+0x210>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a61      	ldr	r2, [pc, #388]	; (800341c <UART_SetConfig+0x2f4>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d123      	bne.n	80032e2 <UART_SetConfig+0x1ba>
 800329a:	4b5d      	ldr	r3, [pc, #372]	; (8003410 <UART_SetConfig+0x2e8>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80032a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032a6:	d012      	beq.n	80032ce <UART_SetConfig+0x1a6>
 80032a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032ac:	d802      	bhi.n	80032b4 <UART_SetConfig+0x18c>
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d007      	beq.n	80032c2 <UART_SetConfig+0x19a>
 80032b2:	e012      	b.n	80032da <UART_SetConfig+0x1b2>
 80032b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032b8:	d00c      	beq.n	80032d4 <UART_SetConfig+0x1ac>
 80032ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032be:	d003      	beq.n	80032c8 <UART_SetConfig+0x1a0>
 80032c0:	e00b      	b.n	80032da <UART_SetConfig+0x1b2>
 80032c2:	2300      	movs	r3, #0
 80032c4:	77fb      	strb	r3, [r7, #31]
 80032c6:	e037      	b.n	8003338 <UART_SetConfig+0x210>
 80032c8:	2302      	movs	r3, #2
 80032ca:	77fb      	strb	r3, [r7, #31]
 80032cc:	e034      	b.n	8003338 <UART_SetConfig+0x210>
 80032ce:	2304      	movs	r3, #4
 80032d0:	77fb      	strb	r3, [r7, #31]
 80032d2:	e031      	b.n	8003338 <UART_SetConfig+0x210>
 80032d4:	2308      	movs	r3, #8
 80032d6:	77fb      	strb	r3, [r7, #31]
 80032d8:	e02e      	b.n	8003338 <UART_SetConfig+0x210>
 80032da:	2310      	movs	r3, #16
 80032dc:	77fb      	strb	r3, [r7, #31]
 80032de:	bf00      	nop
 80032e0:	e02a      	b.n	8003338 <UART_SetConfig+0x210>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a4e      	ldr	r2, [pc, #312]	; (8003420 <UART_SetConfig+0x2f8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d123      	bne.n	8003334 <UART_SetConfig+0x20c>
 80032ec:	4b48      	ldr	r3, [pc, #288]	; (8003410 <UART_SetConfig+0x2e8>)
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80032f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032f8:	d012      	beq.n	8003320 <UART_SetConfig+0x1f8>
 80032fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032fe:	d802      	bhi.n	8003306 <UART_SetConfig+0x1de>
 8003300:	2b00      	cmp	r3, #0
 8003302:	d007      	beq.n	8003314 <UART_SetConfig+0x1ec>
 8003304:	e012      	b.n	800332c <UART_SetConfig+0x204>
 8003306:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800330a:	d00c      	beq.n	8003326 <UART_SetConfig+0x1fe>
 800330c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003310:	d003      	beq.n	800331a <UART_SetConfig+0x1f2>
 8003312:	e00b      	b.n	800332c <UART_SetConfig+0x204>
 8003314:	2300      	movs	r3, #0
 8003316:	77fb      	strb	r3, [r7, #31]
 8003318:	e00e      	b.n	8003338 <UART_SetConfig+0x210>
 800331a:	2302      	movs	r3, #2
 800331c:	77fb      	strb	r3, [r7, #31]
 800331e:	e00b      	b.n	8003338 <UART_SetConfig+0x210>
 8003320:	2304      	movs	r3, #4
 8003322:	77fb      	strb	r3, [r7, #31]
 8003324:	e008      	b.n	8003338 <UART_SetConfig+0x210>
 8003326:	2308      	movs	r3, #8
 8003328:	77fb      	strb	r3, [r7, #31]
 800332a:	e005      	b.n	8003338 <UART_SetConfig+0x210>
 800332c:	2310      	movs	r3, #16
 800332e:	77fb      	strb	r3, [r7, #31]
 8003330:	bf00      	nop
 8003332:	e001      	b.n	8003338 <UART_SetConfig+0x210>
 8003334:	2310      	movs	r3, #16
 8003336:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003340:	f040 8090 	bne.w	8003464 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8003344:	7ffb      	ldrb	r3, [r7, #31]
 8003346:	2b08      	cmp	r3, #8
 8003348:	d86c      	bhi.n	8003424 <UART_SetConfig+0x2fc>
 800334a:	a201      	add	r2, pc, #4	; (adr r2, 8003350 <UART_SetConfig+0x228>)
 800334c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003350:	08003375 	.word	0x08003375
 8003354:	08003395 	.word	0x08003395
 8003358:	080033b5 	.word	0x080033b5
 800335c:	08003425 	.word	0x08003425
 8003360:	080033d1 	.word	0x080033d1
 8003364:	08003425 	.word	0x08003425
 8003368:	08003425 	.word	0x08003425
 800336c:	08003425 	.word	0x08003425
 8003370:	080033f1 	.word	0x080033f1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003374:	f7ff fb42 	bl	80029fc <HAL_RCC_GetPCLK1Freq>
 8003378:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	005a      	lsls	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	085b      	lsrs	r3, r3, #1
 8003384:	441a      	add	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	fbb2 f3f3 	udiv	r3, r2, r3
 800338e:	b29b      	uxth	r3, r3
 8003390:	61bb      	str	r3, [r7, #24]
        break;
 8003392:	e04a      	b.n	800342a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003394:	f7ff fb54 	bl	8002a40 <HAL_RCC_GetPCLK2Freq>
 8003398:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	005a      	lsls	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	085b      	lsrs	r3, r3, #1
 80033a4:	441a      	add	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	61bb      	str	r3, [r7, #24]
        break;
 80033b2:	e03a      	b.n	800342a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	085b      	lsrs	r3, r3, #1
 80033ba:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80033be:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6852      	ldr	r2, [r2, #4]
 80033c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	61bb      	str	r3, [r7, #24]
        break;
 80033ce:	e02c      	b.n	800342a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033d0:	f7ff fa9e 	bl	8002910 <HAL_RCC_GetSysClockFreq>
 80033d4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	005a      	lsls	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	085b      	lsrs	r3, r3, #1
 80033e0:	441a      	add	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	61bb      	str	r3, [r7, #24]
        break;
 80033ee:	e01c      	b.n	800342a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	085b      	lsrs	r3, r3, #1
 80033f6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003402:	b29b      	uxth	r3, r3
 8003404:	61bb      	str	r3, [r7, #24]
        break;
 8003406:	e010      	b.n	800342a <UART_SetConfig+0x302>
 8003408:	efff69f3 	.word	0xefff69f3
 800340c:	40013800 	.word	0x40013800
 8003410:	40021000 	.word	0x40021000
 8003414:	40004400 	.word	0x40004400
 8003418:	40004800 	.word	0x40004800
 800341c:	40004c00 	.word	0x40004c00
 8003420:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	75fb      	strb	r3, [r7, #23]
        break;
 8003428:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	2b0f      	cmp	r3, #15
 800342e:	d916      	bls.n	800345e <UART_SetConfig+0x336>
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003436:	d212      	bcs.n	800345e <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	b29b      	uxth	r3, r3
 800343c:	f023 030f 	bic.w	r3, r3, #15
 8003440:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	085b      	lsrs	r3, r3, #1
 8003446:	b29b      	uxth	r3, r3
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	b29a      	uxth	r2, r3
 800344e:	897b      	ldrh	r3, [r7, #10]
 8003450:	4313      	orrs	r3, r2
 8003452:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	897a      	ldrh	r2, [r7, #10]
 800345a:	60da      	str	r2, [r3, #12]
 800345c:	e072      	b.n	8003544 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	75fb      	strb	r3, [r7, #23]
 8003462:	e06f      	b.n	8003544 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8003464:	7ffb      	ldrb	r3, [r7, #31]
 8003466:	2b08      	cmp	r3, #8
 8003468:	d85b      	bhi.n	8003522 <UART_SetConfig+0x3fa>
 800346a:	a201      	add	r2, pc, #4	; (adr r2, 8003470 <UART_SetConfig+0x348>)
 800346c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003470:	08003495 	.word	0x08003495
 8003474:	080034b3 	.word	0x080034b3
 8003478:	080034d1 	.word	0x080034d1
 800347c:	08003523 	.word	0x08003523
 8003480:	080034ed 	.word	0x080034ed
 8003484:	08003523 	.word	0x08003523
 8003488:	08003523 	.word	0x08003523
 800348c:	08003523 	.word	0x08003523
 8003490:	0800350b 	.word	0x0800350b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003494:	f7ff fab2 	bl	80029fc <HAL_RCC_GetPCLK1Freq>
 8003498:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	085a      	lsrs	r2, r3, #1
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	441a      	add	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	61bb      	str	r3, [r7, #24]
        break;
 80034b0:	e03a      	b.n	8003528 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034b2:	f7ff fac5 	bl	8002a40 <HAL_RCC_GetPCLK2Freq>
 80034b6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	085a      	lsrs	r2, r3, #1
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	441a      	add	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	61bb      	str	r3, [r7, #24]
        break;
 80034ce:	e02b      	b.n	8003528 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	085b      	lsrs	r3, r3, #1
 80034d6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80034da:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6852      	ldr	r2, [r2, #4]
 80034e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	61bb      	str	r3, [r7, #24]
        break;
 80034ea:	e01d      	b.n	8003528 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ec:	f7ff fa10 	bl	8002910 <HAL_RCC_GetSysClockFreq>
 80034f0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	085a      	lsrs	r2, r3, #1
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	441a      	add	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	fbb2 f3f3 	udiv	r3, r2, r3
 8003504:	b29b      	uxth	r3, r3
 8003506:	61bb      	str	r3, [r7, #24]
        break;
 8003508:	e00e      	b.n	8003528 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	085b      	lsrs	r3, r3, #1
 8003510:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	fbb2 f3f3 	udiv	r3, r2, r3
 800351c:	b29b      	uxth	r3, r3
 800351e:	61bb      	str	r3, [r7, #24]
        break;
 8003520:	e002      	b.n	8003528 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	75fb      	strb	r3, [r7, #23]
        break;
 8003526:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	2b0f      	cmp	r3, #15
 800352c:	d908      	bls.n	8003540 <UART_SetConfig+0x418>
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003534:	d204      	bcs.n	8003540 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	60da      	str	r2, [r3, #12]
 800353e:	e001      	b.n	8003544 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003550:	7dfb      	ldrb	r3, [r7, #23]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3720      	adds	r7, #32
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop

0800355c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00a      	beq.n	800360e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	f003 0320 	and.w	r3, r3, #32
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00a      	beq.n	8003630 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003638:	2b00      	cmp	r3, #0
 800363a:	d01a      	beq.n	8003672 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800365a:	d10a      	bne.n	8003672 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	605a      	str	r2, [r3, #4]
  }
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af02      	add	r7, sp, #8
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80036ae:	f7fd f8b5 	bl	800081c <HAL_GetTick>
 80036b2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d10e      	bne.n	80036e0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f82a 	bl	800372a <UART_WaitOnFlagUntilTimeout>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e020      	b.n	8003722 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0304 	and.w	r3, r3, #4
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d10e      	bne.n	800370c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f814 	bl	800372a <UART_WaitOnFlagUntilTimeout>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e00a      	b.n	8003722 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2220      	movs	r2, #32
 8003710:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2220      	movs	r2, #32
 8003716:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b084      	sub	sp, #16
 800372e:	af00      	add	r7, sp, #0
 8003730:	60f8      	str	r0, [r7, #12]
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	603b      	str	r3, [r7, #0]
 8003736:	4613      	mov	r3, r2
 8003738:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800373a:	e05d      	b.n	80037f8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003742:	d059      	beq.n	80037f8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003744:	f7fd f86a 	bl	800081c <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	429a      	cmp	r2, r3
 8003752:	d302      	bcc.n	800375a <UART_WaitOnFlagUntilTimeout+0x30>
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d11b      	bne.n	8003792 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003768:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0201 	bic.w	r2, r2, #1
 8003778:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2220      	movs	r2, #32
 800377e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2220      	movs	r2, #32
 8003784:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e042      	b.n	8003818 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	d02b      	beq.n	80037f8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ae:	d123      	bne.n	80037f8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037b8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037c8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0201 	bic.w	r2, r2, #1
 80037d8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2220      	movs	r2, #32
 80037de:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2220      	movs	r2, #32
 80037e4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2220      	movs	r2, #32
 80037ea:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e00f      	b.n	8003818 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	69da      	ldr	r2, [r3, #28]
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	4013      	ands	r3, r2
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	429a      	cmp	r2, r3
 8003806:	bf0c      	ite	eq
 8003808:	2301      	moveq	r3, #1
 800380a:	2300      	movne	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	461a      	mov	r2, r3
 8003810:	79fb      	ldrb	r3, [r7, #7]
 8003812:	429a      	cmp	r2, r3
 8003814:	d092      	beq.n	800373c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003828:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800382c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003834:	b29a      	uxth	r2, r3
 8003836:	89fb      	ldrh	r3, [r7, #14]
 8003838:	4313      	orrs	r3, r2
 800383a:	b29a      	uxth	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003858:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800385c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003864:	b29b      	uxth	r3, r3
 8003866:	b21a      	sxth	r2, r3
 8003868:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800386c:	43db      	mvns	r3, r3
 800386e:	b21b      	sxth	r3, r3
 8003870:	4013      	ands	r3, r2
 8003872:	b21b      	sxth	r3, r3
 8003874:	b29a      	uxth	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800388a:	b084      	sub	sp, #16
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	f107 0014 	add.w	r0, r7, #20
 8003898:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff ffaf 	bl	8003820 <USB_EnableGlobalInt>

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038ce:	b004      	add	sp, #16
 80038d0:	4770      	bx	lr
	...

080038d4 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80038d4:	b590      	push	{r4, r7, lr}
 80038d6:	b095      	sub	sp, #84	; 0x54
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	785b      	ldrb	r3, [r3, #1]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	f040 816d 	bne.w	8003bc2 <USB_EPStartXfer+0x2ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	699a      	ldr	r2, [r3, #24]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d909      	bls.n	8003908 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	699a      	ldr	r2, [r3, #24]
 80038fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003900:	1ad2      	subs	r2, r2, r3
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	619a      	str	r2, [r3, #24]
 8003906:	e005      	b.n	8003914 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2200      	movs	r2, #0
 8003912:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	7b1b      	ldrb	r3, [r3, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d11a      	bne.n	8003952 <USB_EPStartXfer+0x7e>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	6959      	ldr	r1, [r3, #20]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	88da      	ldrh	r2, [r3, #6]
 8003924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003926:	b29b      	uxth	r3, r3
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 fac9 	bl	8003ec0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800392e:	687c      	ldr	r4, [r7, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003936:	b29b      	uxth	r3, r3
 8003938:	441c      	add	r4, r3
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	4423      	add	r3, r4
 8003942:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	801a      	strh	r2, [r3, #0]
 8003950:	e11b      	b.n	8003b8a <USB_EPStartXfer+0x2b6>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	b29b      	uxth	r3, r3
 8003960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003964:	2b00      	cmp	r3, #0
 8003966:	d06a      	beq.n	8003a3e <USB_EPStartXfer+0x16a>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003968:	687c      	ldr	r4, [r7, #4]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	785b      	ldrb	r3, [r3, #1]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d14c      	bne.n	8003a0c <USB_EPStartXfer+0x138>
 8003972:	687c      	ldr	r4, [r7, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800397a:	b29b      	uxth	r3, r3
 800397c:	441c      	add	r4, r3
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	4423      	add	r3, r4
 8003986:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800398e:	2b00      	cmp	r3, #0
 8003990:	d110      	bne.n	80039b4 <USB_EPStartXfer+0xe0>
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800399a:	b29a      	uxth	r2, r3
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	801a      	strh	r2, [r3, #0]
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	801a      	strh	r2, [r3, #0]
 80039b2:	e03f      	b.n	8003a34 <USB_EPStartXfer+0x160>
 80039b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039b6:	2b3e      	cmp	r3, #62	; 0x3e
 80039b8:	d811      	bhi.n	80039de <USB_EPStartXfer+0x10a>
 80039ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039bc:	085b      	lsrs	r3, r3, #1
 80039be:	647b      	str	r3, [r7, #68]	; 0x44
 80039c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d002      	beq.n	80039d0 <USB_EPStartXfer+0xfc>
 80039ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039cc:	3301      	adds	r3, #1
 80039ce:	647b      	str	r3, [r7, #68]	; 0x44
 80039d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	029b      	lsls	r3, r3, #10
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	801a      	strh	r2, [r3, #0]
 80039dc:	e02a      	b.n	8003a34 <USB_EPStartXfer+0x160>
 80039de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	647b      	str	r3, [r7, #68]	; 0x44
 80039e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039e6:	f003 031f 	and.w	r3, r3, #31
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d102      	bne.n	80039f4 <USB_EPStartXfer+0x120>
 80039ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039f0:	3b01      	subs	r3, #1
 80039f2:	647b      	str	r3, [r7, #68]	; 0x44
 80039f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	029b      	lsls	r3, r3, #10
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	801a      	strh	r2, [r3, #0]
 8003a0a:	e013      	b.n	8003a34 <USB_EPStartXfer+0x160>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	785b      	ldrb	r3, [r3, #1]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d10f      	bne.n	8003a34 <USB_EPStartXfer+0x160>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	441c      	add	r4, r3
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	4423      	add	r3, r4
 8003a26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	895b      	ldrh	r3, [r3, #10]
 8003a38:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003a3c:	e069      	b.n	8003b12 <USB_EPStartXfer+0x23e>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	785b      	ldrb	r3, [r3, #1]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d14c      	bne.n	8003ae0 <USB_EPStartXfer+0x20c>
 8003a46:	687c      	ldr	r4, [r7, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	441c      	add	r4, r3
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4423      	add	r3, r4
 8003a5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003a5e:	61bb      	str	r3, [r7, #24]
 8003a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d110      	bne.n	8003a88 <USB_EPStartXfer+0x1b4>
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	801a      	strh	r2, [r3, #0]
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	881b      	ldrh	r3, [r3, #0]
 8003a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	801a      	strh	r2, [r3, #0]
 8003a86:	e040      	b.n	8003b0a <USB_EPStartXfer+0x236>
 8003a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a8a:	2b3e      	cmp	r3, #62	; 0x3e
 8003a8c:	d811      	bhi.n	8003ab2 <USB_EPStartXfer+0x1de>
 8003a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a90:	085b      	lsrs	r3, r3, #1
 8003a92:	643b      	str	r3, [r7, #64]	; 0x40
 8003a94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <USB_EPStartXfer+0x1d0>
 8003a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	643b      	str	r3, [r7, #64]	; 0x40
 8003aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	029b      	lsls	r3, r3, #10
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	801a      	strh	r2, [r3, #0]
 8003ab0:	e02b      	b.n	8003b0a <USB_EPStartXfer+0x236>
 8003ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ab4:	095b      	lsrs	r3, r3, #5
 8003ab6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aba:	f003 031f 	and.w	r3, r3, #31
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d102      	bne.n	8003ac8 <USB_EPStartXfer+0x1f4>
 8003ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	029b      	lsls	r3, r3, #10
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ad4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	801a      	strh	r2, [r3, #0]
 8003ade:	e014      	b.n	8003b0a <USB_EPStartXfer+0x236>
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	785b      	ldrb	r3, [r3, #1]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d110      	bne.n	8003b0a <USB_EPStartXfer+0x236>
 8003ae8:	687c      	ldr	r4, [r7, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	441c      	add	r4, r3
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	4423      	add	r3, r4
 8003afc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003b00:	61fb      	str	r3, [r7, #28]
 8003b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	891b      	ldrh	r3, [r3, #8]
 8003b0e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	6959      	ldr	r1, [r3, #20]
 8003b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f9ce 	bl	8003ec0 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	785b      	ldrb	r3, [r3, #1]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d115      	bne.n	8003b58 <USB_EPStartXfer+0x284>
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4413      	add	r3, r2
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b42:	b29c      	uxth	r4, r3
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	441a      	add	r2, r3
 8003b4e:	4b96      	ldr	r3, [pc, #600]	; (8003da8 <USB_EPStartXfer+0x4d4>)
 8003b50:	4323      	orrs	r3, r4
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	8013      	strh	r3, [r2, #0]
 8003b56:	e018      	b.n	8003b8a <USB_EPStartXfer+0x2b6>
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	785b      	ldrb	r3, [r3, #1]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d114      	bne.n	8003b8a <USB_EPStartXfer+0x2b6>
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b76:	b29c      	uxth	r4, r3
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	441a      	add	r2, r3
 8003b82:	4b8a      	ldr	r3, [pc, #552]	; (8003dac <USB_EPStartXfer+0x4d8>)
 8003b84:	4323      	orrs	r3, r4
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ba0:	b29c      	uxth	r4, r3
 8003ba2:	f084 0310 	eor.w	r3, r4, #16
 8003ba6:	b29c      	uxth	r4, r3
 8003ba8:	f084 0320 	eor.w	r3, r4, #32
 8003bac:	b29c      	uxth	r4, r3
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	441a      	add	r2, r3
 8003bb8:	4b7d      	ldr	r3, [pc, #500]	; (8003db0 <USB_EPStartXfer+0x4dc>)
 8003bba:	4323      	orrs	r3, r4
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	8013      	strh	r3, [r2, #0]
 8003bc0:	e153      	b.n	8003e6a <USB_EPStartXfer+0x596>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	699a      	ldr	r2, [r3, #24]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d909      	bls.n	8003be2 <USB_EPStartXfer+0x30e>
    {
      len = ep->maxpacket;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	699a      	ldr	r2, [r3, #24]
 8003bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bda:	1ad2      	subs	r2, r2, r3
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	619a      	str	r2, [r3, #24]
 8003be0:	e005      	b.n	8003bee <USB_EPStartXfer+0x31a>
    }
    else
    {
      len = ep->xfer_len;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	2200      	movs	r2, #0
 8003bec:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	7b1b      	ldrb	r3, [r3, #12]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d14c      	bne.n	8003c90 <USB_EPStartXfer+0x3bc>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003bf6:	687c      	ldr	r4, [r7, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	441c      	add	r4, r3
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	4423      	add	r3, r4
 8003c0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c0e:	623b      	str	r3, [r7, #32]
 8003c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d110      	bne.n	8003c38 <USB_EPStartXfer+0x364>
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	881b      	ldrh	r3, [r3, #0]
 8003c1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	801a      	strh	r2, [r3, #0]
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	801a      	strh	r2, [r3, #0]
 8003c36:	e0fd      	b.n	8003e34 <USB_EPStartXfer+0x560>
 8003c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c3a:	2b3e      	cmp	r3, #62	; 0x3e
 8003c3c:	d811      	bhi.n	8003c62 <USB_EPStartXfer+0x38e>
 8003c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c40:	085b      	lsrs	r3, r3, #1
 8003c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <USB_EPStartXfer+0x380>
 8003c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c50:	3301      	adds	r3, #1
 8003c52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	029b      	lsls	r3, r3, #10
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	801a      	strh	r2, [r3, #0]
 8003c60:	e0e8      	b.n	8003e34 <USB_EPStartXfer+0x560>
 8003c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c64:	095b      	lsrs	r3, r3, #5
 8003c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c6a:	f003 031f 	and.w	r3, r3, #31
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d102      	bne.n	8003c78 <USB_EPStartXfer+0x3a4>
 8003c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c74:	3b01      	subs	r3, #1
 8003c76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	029b      	lsls	r3, r3, #10
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	801a      	strh	r2, [r3, #0]
 8003c8e:	e0d1      	b.n	8003e34 <USB_EPStartXfer+0x560>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	785b      	ldrb	r3, [r3, #1]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d14c      	bne.n	8003d32 <USB_EPStartXfer+0x45e>
 8003c98:	687c      	ldr	r4, [r7, #4]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	441c      	add	r4, r3
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	4423      	add	r3, r4
 8003cac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d110      	bne.n	8003cda <USB_EPStartXfer+0x406>
 8003cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc4:	801a      	strh	r2, [r3, #0]
 8003cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd6:	801a      	strh	r2, [r3, #0]
 8003cd8:	e040      	b.n	8003d5c <USB_EPStartXfer+0x488>
 8003cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cdc:	2b3e      	cmp	r3, #62	; 0x3e
 8003cde:	d811      	bhi.n	8003d04 <USB_EPStartXfer+0x430>
 8003ce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ce2:	085b      	lsrs	r3, r3, #1
 8003ce4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <USB_EPStartXfer+0x422>
 8003cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	029b      	lsls	r3, r3, #10
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d00:	801a      	strh	r2, [r3, #0]
 8003d02:	e02b      	b.n	8003d5c <USB_EPStartXfer+0x488>
 8003d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d06:	095b      	lsrs	r3, r3, #5
 8003d08:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d102      	bne.n	8003d1a <USB_EPStartXfer+0x446>
 8003d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d16:	3b01      	subs	r3, #1
 8003d18:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	029b      	lsls	r3, r3, #10
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2e:	801a      	strh	r2, [r3, #0]
 8003d30:	e014      	b.n	8003d5c <USB_EPStartXfer+0x488>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	785b      	ldrb	r3, [r3, #1]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d110      	bne.n	8003d5c <USB_EPStartXfer+0x488>
 8003d3a:	687c      	ldr	r4, [r7, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	441c      	add	r4, r3
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	4423      	add	r3, r4
 8003d4e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d52:	633b      	str	r3, [r7, #48]	; 0x30
 8003d54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5a:	801a      	strh	r2, [r3, #0]
 8003d5c:	687c      	ldr	r4, [r7, #4]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	785b      	ldrb	r3, [r3, #1]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d152      	bne.n	8003e0c <USB_EPStartXfer+0x538>
 8003d66:	687c      	ldr	r4, [r7, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	441c      	add	r4, r3
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	4423      	add	r3, r4
 8003d7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d116      	bne.n	8003db4 <USB_EPStartXfer+0x4e0>
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	801a      	strh	r2, [r3, #0]
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	801a      	strh	r2, [r3, #0]
 8003da6:	e045      	b.n	8003e34 <USB_EPStartXfer+0x560>
 8003da8:	ffff80c0 	.word	0xffff80c0
 8003dac:	ffffc080 	.word	0xffffc080
 8003db0:	ffff8080 	.word	0xffff8080
 8003db4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003db6:	2b3e      	cmp	r3, #62	; 0x3e
 8003db8:	d811      	bhi.n	8003dde <USB_EPStartXfer+0x50a>
 8003dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dbc:	085b      	lsrs	r3, r3, #1
 8003dbe:	637b      	str	r3, [r7, #52]	; 0x34
 8003dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <USB_EPStartXfer+0x4fc>
 8003dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dcc:	3301      	adds	r3, #1
 8003dce:	637b      	str	r3, [r7, #52]	; 0x34
 8003dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	029b      	lsls	r3, r3, #10
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	801a      	strh	r2, [r3, #0]
 8003ddc:	e02a      	b.n	8003e34 <USB_EPStartXfer+0x560>
 8003dde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003de0:	095b      	lsrs	r3, r3, #5
 8003de2:	637b      	str	r3, [r7, #52]	; 0x34
 8003de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003de6:	f003 031f 	and.w	r3, r3, #31
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d102      	bne.n	8003df4 <USB_EPStartXfer+0x520>
 8003dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df0:	3b01      	subs	r3, #1
 8003df2:	637b      	str	r3, [r7, #52]	; 0x34
 8003df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	029b      	lsls	r3, r3, #10
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	801a      	strh	r2, [r3, #0]
 8003e0a:	e013      	b.n	8003e34 <USB_EPStartXfer+0x560>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	785b      	ldrb	r3, [r3, #1]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d10f      	bne.n	8003e34 <USB_EPStartXfer+0x560>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	441c      	add	r4, r3
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	4423      	add	r3, r4
 8003e26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003e2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e32:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4a:	b29c      	uxth	r4, r3
 8003e4c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003e50:	b29c      	uxth	r4, r3
 8003e52:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003e56:	b29c      	uxth	r4, r3
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	441a      	add	r2, r3
 8003e62:	4b04      	ldr	r3, [pc, #16]	; (8003e74 <USB_EPStartXfer+0x5a0>)
 8003e64:	4323      	orrs	r3, r4
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3754      	adds	r7, #84	; 0x54
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd90      	pop	{r4, r7, pc}
 8003e74:	ffff8080 	.word	0xffff8080

08003e78 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8003e84:	78fb      	ldrb	r3, [r7, #3]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d103      	bne.n	8003e92 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2280      	movs	r2, #128	; 0x80
 8003e8e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b08d      	sub	sp, #52	; 0x34
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	4611      	mov	r1, r2
 8003ecc:	461a      	mov	r2, r3
 8003ece:	460b      	mov	r3, r1
 8003ed0:	80fb      	strh	r3, [r7, #6]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003ed6:	88bb      	ldrh	r3, [r7, #4]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	085b      	lsrs	r3, r3, #1
 8003edc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003ee6:	88fa      	ldrh	r2, [r7, #6]
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ef0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ef6:	e01b      	b.n	8003f30 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	3301      	adds	r3, #1
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	021b      	lsls	r3, r3, #8
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	461a      	mov	r2, r3
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8003f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f20:	3302      	adds	r3, #2
 8003f22:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	3301      	adds	r3, #1
 8003f28:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8003f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1e0      	bne.n	8003ef8 <USB_WritePMA+0x38>
  }
}
 8003f36:	bf00      	nop
 8003f38:	3734      	adds	r7, #52	; 0x34
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b08b      	sub	sp, #44	; 0x2c
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	60f8      	str	r0, [r7, #12]
 8003f4a:	60b9      	str	r1, [r7, #8]
 8003f4c:	4611      	mov	r1, r2
 8003f4e:	461a      	mov	r2, r3
 8003f50:	460b      	mov	r3, r1
 8003f52:	80fb      	strh	r3, [r7, #6]
 8003f54:	4613      	mov	r3, r2
 8003f56:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003f58:	88bb      	ldrh	r3, [r7, #4]
 8003f5a:	085b      	lsrs	r3, r3, #1
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003f68:	88fa      	ldrh	r2, [r7, #6]
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f72:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
 8003f78:	e018      	b.n	8003fac <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	3302      	adds	r3, #2
 8003f86:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	3301      	adds	r3, #1
 8003f94:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	0a1b      	lsrs	r3, r3, #8
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1e3      	bne.n	8003f7a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003fb2:	88bb      	ldrh	r3, [r7, #4]
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d007      	beq.n	8003fce <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	701a      	strb	r2, [r3, #0]
  }
}
 8003fce:	bf00      	nop
 8003fd0:	372c      	adds	r7, #44	; 0x2c
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
	...

08003fdc <__libc_init_array>:
 8003fdc:	b570      	push	{r4, r5, r6, lr}
 8003fde:	4e0d      	ldr	r6, [pc, #52]	; (8004014 <__libc_init_array+0x38>)
 8003fe0:	4c0d      	ldr	r4, [pc, #52]	; (8004018 <__libc_init_array+0x3c>)
 8003fe2:	1ba4      	subs	r4, r4, r6
 8003fe4:	10a4      	asrs	r4, r4, #2
 8003fe6:	2500      	movs	r5, #0
 8003fe8:	42a5      	cmp	r5, r4
 8003fea:	d109      	bne.n	8004000 <__libc_init_array+0x24>
 8003fec:	4e0b      	ldr	r6, [pc, #44]	; (800401c <__libc_init_array+0x40>)
 8003fee:	4c0c      	ldr	r4, [pc, #48]	; (8004020 <__libc_init_array+0x44>)
 8003ff0:	f000 f820 	bl	8004034 <_init>
 8003ff4:	1ba4      	subs	r4, r4, r6
 8003ff6:	10a4      	asrs	r4, r4, #2
 8003ff8:	2500      	movs	r5, #0
 8003ffa:	42a5      	cmp	r5, r4
 8003ffc:	d105      	bne.n	800400a <__libc_init_array+0x2e>
 8003ffe:	bd70      	pop	{r4, r5, r6, pc}
 8004000:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004004:	4798      	blx	r3
 8004006:	3501      	adds	r5, #1
 8004008:	e7ee      	b.n	8003fe8 <__libc_init_array+0xc>
 800400a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800400e:	4798      	blx	r3
 8004010:	3501      	adds	r5, #1
 8004012:	e7f2      	b.n	8003ffa <__libc_init_array+0x1e>
 8004014:	08004084 	.word	0x08004084
 8004018:	08004084 	.word	0x08004084
 800401c:	08004084 	.word	0x08004084
 8004020:	08004088 	.word	0x08004088

08004024 <memset>:
 8004024:	4402      	add	r2, r0
 8004026:	4603      	mov	r3, r0
 8004028:	4293      	cmp	r3, r2
 800402a:	d100      	bne.n	800402e <memset+0xa>
 800402c:	4770      	bx	lr
 800402e:	f803 1b01 	strb.w	r1, [r3], #1
 8004032:	e7f9      	b.n	8004028 <memset+0x4>

08004034 <_init>:
 8004034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004036:	bf00      	nop
 8004038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800403a:	bc08      	pop	{r3}
 800403c:	469e      	mov	lr, r3
 800403e:	4770      	bx	lr

08004040 <_fini>:
 8004040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004042:	bf00      	nop
 8004044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004046:	bc08      	pop	{r3}
 8004048:	469e      	mov	lr, r3
 800404a:	4770      	bx	lr
